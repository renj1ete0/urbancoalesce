[
  {
    "objectID": "explore/167_OD_analysis.html",
    "href": "explore/167_OD_analysis.html",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "",
    "text": "Caution\n\n\n\nThis article and analysis is a work-in-progress! Please read and interpret results at your own risk, check back for the final article!\nNote: There is some inaccuracies with the original dataset provided by LTA on 24/4/2024, any analysis prior to 24/2/2024 may derive inaccurate conclusions"
  },
  {
    "objectID": "explore/167_OD_analysis.html#background",
    "href": "explore/167_OD_analysis.html#background",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "2.1 Background",
    "text": "2.1 Background\nWith the introduction of Thomson East Coast Line 3 between Caldecott and Gardens by the Bay stations on DD/MM/YYYY, bridging the Upper Thomson area towards the city, the Land Transport Authority of Singapore (LTA) sought to reduce duplication of bus routes with new train lines, which was common practice in Singapore.\nThe announcement by the LTA to rationalise bus service 167 came with much negative response"
  },
  {
    "objectID": "explore/167_OD_analysis.html#objectives",
    "href": "explore/167_OD_analysis.html#objectives",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "2.2 Objectives",
    "text": "2.2 Objectives\nUnderstand more about the initial failure of the route rationalisation of bus service 167:\n\nCommuters perspective\nWhy a hub-and-spoke approach (with the introduction of Thomson East Coast Line) is insufficient to shift demand? [pending analysis]\n\nClick here to skip to the analysis"
  },
  {
    "objectID": "explore/167_OD_analysis.html#setting-up",
    "href": "explore/167_OD_analysis.html#setting-up",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "3.1 Setting Up",
    "text": "3.1 Setting Up\nPackages required to be loaded for\n\npacman::p_load(dplyr, readr, sf, tidyverse, tmap, sfdep, ggpubr, Metrics, ggplot2, plotly, spdep, rjson, od, gifski, stplanr)"
  },
  {
    "objectID": "explore/167_OD_analysis.html#data-sources",
    "href": "explore/167_OD_analysis.html#data-sources",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "3.2 Data Sources",
    "text": "3.2 Data Sources\n\n\n\nDataset Name\nSource\nMethodology\n\n\n\n\nOrigin-Destination Passenger Count for Buses (OD) Nov 2023\nLTA Datamall\nAPI\n\n\nBus Routes as of 26 Nov 2023\nLTA Datamall\nAPI\n\n\nBus Stops as of 26 Nov 2023\nLTA Datamall\nAPI"
  },
  {
    "objectID": "explore/167_OD_analysis.html#loading-data",
    "href": "explore/167_OD_analysis.html#loading-data",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "4.1 Loading Data",
    "text": "4.1 Loading Data\nLoading the Origin-Destination Passenger Count for Buses\n\nRAW_OD_2019_11 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_201911.csv\")\nRAW_OD_2021_07 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_202211.csv\")\nRAW_OD_2022_08 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_202211.csv\")\nRAW_OD_2022_11 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_202211.csv\")\nRAW_OD_2023_11 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_202311.csv\")\n\nLoading the Bus Routes JSON file:\n\nBUS_ROUTE &lt;- fromJSON(file=\"data/167_OD_analysis/busroute_2023-11-26.json\")\nBUS_ROUTE_2021_07 &lt;- fromJSON(file=\"data/167_OD_analysis/busroute_2021-07.json\")\n\nLoading the Bus Stops JSON file:\n\nBUS_STOP &lt;- fromJSON(file=\"data/167_OD_analysis/busstop_2023-11-26.json\")\n\nLoading the Bus Service JSON file:\n\nBUS_SERVICE &lt;- fromJSON(file=\"data/167_OD_analysis/busservice_2023-11-26.json\")\nBUS_SERVICE_2021_07 &lt;- fromJSON(file=\"data/167_OD_analysis/busservice_2021-07.json\")\n\nLoad MPSZ (2019):\n\nmpsz &lt;- st_read(dsn = \"data/167_OD_analysis/\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\renji\\OneDrive - Singapore Management University\\0_git-projects\\urbancoalesce\\explore\\data\\167_OD_analysis' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "explore/167_OD_analysis.html#define-static-variables",
    "href": "explore/167_OD_analysis.html#define-static-variables",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "4.2 Define Static Variables",
    "text": "4.2 Define Static Variables\n\n4.2.1 Normalise Data\nAs the OD data from LTA sums trips from entire month, we need to normalise them to trips per day for ease of comparison between Weekdays, Saturdays and Sun_PH.\nWe first define the standard month information before executing the normalisation operations.\n\nWEEKDAY_OF_MONTH = 21\nSUN_PH_OF_MONTH = 5\nSAT_OF_MONTH = 4\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\nOD_2023_11 &lt;- RAW_OD_2023_11 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))\n\n\nWEEKDAY_OF_MONTH = 22\nSUN_PH_OF_MONTH = 4\nSAT_OF_MONTH = 4\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\nOD_2022_11 &lt;- RAW_OD_2022_11 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))\n\n\nWEEKDAY_OF_MONTH = 21\nSUN_PH_OF_MONTH = 5\nSAT_OF_MONTH = 5\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\nOD_2021_07 &lt;- RAW_OD_2021_07 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))\n\n\nWEEKDAY_OF_MONTH = 22\nSUN_PH_OF_MONTH = 4\nSAT_OF_MONTH = 4\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\nOD_2022_08 &lt;- RAW_OD_2022_08 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))\n\n\nWEEKDAY_OF_MONTH = 21\nSUN_PH_OF_MONTH = 4\nSAT_OF_MONTH = 5\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\nOD_2019_11 &lt;- RAW_OD_2019_11 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))"
  },
  {
    "objectID": "explore/167_OD_analysis.html#extracting-relevant-information",
    "href": "explore/167_OD_analysis.html#extracting-relevant-information",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "4.3 Extracting Relevant Information",
    "text": "4.3 Extracting Relevant Information\nFor the OD Passenger Count, we are only interested in obtaining counts which involves bus service 167. We will need to extract it twice, once for each direction.\nWe are not implementing a check for stops since the JSON data from LTA Datamall is returned in stop sequence.\n\n4.3.1 Extract 167 Bus Stops\n\n\n\n\n\n\nNote\n\n\n\nAs LTA’s OD Count stores CBD area bus stops starting with 0 as 4 digit codes instead of 5 digit prefixed with 0, we recode the bus stops as numeric and drop the ‘0’ prefix\n\n\n\nBS_167_DIR_1_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\nBS_167_DIR_2_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\n\nfor (route_info in BUS_ROUTE){\n  if (route_info$ServiceNo == \"167\"){\n    if (route_info$Direction == 1){\n      BS_167_DIR_1_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_1_DF[nrow(BS_167_DIR_1_DF) +1,] &lt;- BS_167_DIR_1_temp\n    }\n    else if (route_info$Direction == 2){\n      BS_167_DIR_2_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_2_DF[nrow(BS_167_DIR_2_DF) +1,] &lt;- BS_167_DIR_2_temp  \n    }\n  }\n}\n\nrm(BS_167_DIR_1_temp)\nrm(BS_167_DIR_2_temp)\n\n\n\n4.3.2 Append Bus Stop Names to DataFrame\nWe convert the List format of Bus Stops to a more workable DataFrame format\n\nBUS_STOP_DF &lt;- data.frame(BS_Code = integer(), BS_Road_Name = character(), BS_Name = character(), Latitude = double(), Longitude = double())\nfor (bs in BUS_STOP){\n  BS_TEMP &lt;- data.frame(BS_Code = as.numeric(bs$BusStopCode), BS_Road_Name = bs$RoadName, BS_Name = bs$Description, Latitude = as.numeric(bs$Latitude), Longitude = as.numeric(bs$Longitude))\n  BUS_STOP_DF[nrow(BUS_STOP_DF) +1,] &lt;- BS_TEMP  \n}\nrm(BS_TEMP)\n\nWe then do a left join, merging the bus stop info into Bus Service direction DataFrames\n\nBS_167_DIR_1_DF &lt;- merge(x=BS_167_DIR_1_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\nBS_167_DIR_2_DF &lt;- merge(x=BS_167_DIR_2_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\n\n\n\n4.3.3 Reset Row Index Numbering\n\nrownames(BS_167_DIR_1_DF) &lt;- BS_167_DIR_1_DF$Seq\nrownames(BS_167_DIR_2_DF) &lt;- BS_167_DIR_2_DF$Seq\n\n\n\n4.3.4 Extract OD Passenger Count Related to 167\nExtracting the Direction 1 OD Data\n202206\n\nOD_2019_11_DIR1 &lt;- OD_2019_11 %&gt;% filter(OD_2019_11$ORIGIN_PT_CODE %in% BS_167_DIR_1_DF$BS_Code & OD_2019_11$DESTINATION_PT_CODE %in% BS_167_DIR_1_DF$BS_Code)\n\nOD_2019_11_DIR1 &lt;- left_join(OD_2019_11_DIR1, BS_167_DIR_1_DF[1:2], by=c(\"ORIGIN_PT_CODE\" = \"BS_Code\")) %&gt;% rename(OriginSeq = Seq)\nOD_2019_11_DIR1 &lt;- left_join(OD_2019_11_DIR1, BS_167_DIR_1_DF[1:2], by=c(\"DESTINATION_PT_CODE\" = \"BS_Code\")) %&gt;% rename(DestSeq = Seq)\nOD_2019_11_DIR1 &lt;- OD_2019_11_DIR1 %&gt;% filter(OriginSeq &lt; DestSeq)\nOD_2019_11_DIR1 &lt;- OD_2019_11_DIR1[1:7]\n\n2023\n\nOD_2023_11_DIR1 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_1_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_1_DF$BS_Code)\n\nOD_2023_11_DIR1 &lt;- left_join(OD_2023_11_DIR1, BS_167_DIR_1_DF[1:2], by=c(\"ORIGIN_PT_CODE\" = \"BS_Code\")) %&gt;% rename(OriginSeq = Seq)\nOD_2023_11_DIR1 &lt;- left_join(OD_2023_11_DIR1, BS_167_DIR_1_DF[1:2], by=c(\"DESTINATION_PT_CODE\" = \"BS_Code\")) %&gt;% rename(DestSeq = Seq)\nOD_2023_11_DIR1 &lt;- OD_2023_11_DIR1 %&gt;% filter(OriginSeq &lt; DestSeq)\nOD_2023_11_DIR1 &lt;- OD_2023_11_DIR1[1:7]\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_1 &lt;- n_distinct(OD_2023_11_DIR1$ORIGIN_PT_CODE)\nnum_stops_OD_1\n\n[1] 70\n\nnrow(BS_167_DIR_1_DF)\n\n[1] 71\n\nnum_stops_OD_1 == nrow(BS_167_DIR_1_DF)\n\n[1] FALSE\n\nnum_stops_OD_1 &lt;- n_distinct(OD_2023_11_DIR1$ORIGIN_PT_CODE)\nnum_stops_OD_1\n\n[1] 70\n\nnum_stops_OD_1 == nrow(BS_167_DIR_1_DF)\n\n[1] FALSE\n\n\nExtracting the Direction 2 OD Data\n\nOD_2023_11_DIR2 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_2_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_2_DF$BS_Code)\n\nOD_2023_11_DIR2 &lt;- left_join(OD_2023_11_DIR2, BS_167_DIR_2_DF[1:2], by=c(\"ORIGIN_PT_CODE\" = \"BS_Code\")) %&gt;% rename(OriginSeq = Seq)\nOD_2023_11_DIR2 &lt;- left_join(OD_2023_11_DIR2, BS_167_DIR_2_DF[1:2], by=c(\"DESTINATION_PT_CODE\" = \"BS_Code\")) %&gt;% rename(DestSeq = Seq)\nOD_2023_11_DIR2 &lt;- OD_2023_11_DIR2 %&gt;% filter(OriginSeq &lt; DestSeq)\nOD_2023_11_DIR2 &lt;- OD_2023_11_DIR2[1:7]\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_2 &lt;- n_distinct(OD_2023_11_DIR2$ORIGIN_PT_CODE)\nnum_stops_OD_2\n\n[1] 68\n\nnum_stops_OD_2 == nrow(BS_167_DIR_2_DF)\n\n[1] FALSE\n\n\n\n\n4.3.5 Extract Bus Route Info to DataFrame\nWe save information that is required for our analysis from JSON to DataFrame format\n\nBUS_ROUTE_DF &lt;- data.frame(Service_No = character(), Direction = integer(), Seq = integer(), BS_Code = integer(), Distance = double(), WD_FirstBus = integer(), WD_LastBus = integer(), SAT_FirstBus = integer(), SAT_LastBus = integer(), SUN_FirstBus = integer(), SUN_LastBus = integer())\nfor (route in BUS_ROUTE){\n  BS_RT_TEMP &lt;- data.frame(ServiceNo = route$ServiceNo, Direction = as.numeric(route$Direction), Seq = as.numeric(route$StopSequence), BS_Code = as.numeric(route$BusStopCode), Distance = as.numeric(route$Distance), WD_FirstBus = as.numeric(route$WD_FirstBus), WD_LastBus = as.numeric(route$WD_LastBus), SAT_FirstBus = as.numeric(route$SAT_FirstBus), SAT_LastBus = as.numeric(route$SAT_LastBus), SUN_FirstBus = as.numeric(route$SUN_FirstBus), SUN_LastBus = as.numeric(route$SUN_LastBus))\n  BUS_ROUTE_DF[nrow(BUS_ROUTE_DF) +1,] &lt;- BS_RT_TEMP  \n}\nrm(BS_RT_TEMP)\n\n\nBUS_ROUTE_2021_07_DF &lt;- data.frame(Service_No = character(), Direction = integer(), Seq = integer(), BS_Code = integer(), Distance = double(), WD_FirstBus = integer(), WD_LastBus = integer(), SAT_FirstBus = integer(), SAT_LastBus = integer(), SUN_FirstBus = integer(), SUN_LastBus = integer())\nfor (route in BUS_ROUTE_2021_07){\n\n  BS_RT_TEMP &lt;- data.frame(ServiceNo = route$ServiceNo, Direction = as.numeric(route$Direction), Seq = as.numeric(route$StopSequence), BS_Code = as.numeric(route$BusStopCode), Distance = as.numeric(route$Distance), WD_FirstBus = as.numeric(route$WD_FirstBus), WD_LastBus = as.numeric(route$WD_LastBus), SAT_FirstBus = as.numeric(route$SAT_FirstBus), SAT_LastBus = as.numeric(route$SAT_LastBus), SUN_FirstBus = as.numeric(route$SUN_FirstBus), SUN_LastBus = as.numeric(route$SUN_LastBus))\n  BUS_ROUTE_2021_07_DF[nrow(BUS_ROUTE_2021_07_DF) +1,] &lt;- BS_RT_TEMP  \n}\n\nBUS_ROUTE_2021_07_DF &lt;- unique(BUS_ROUTE_2021_07_DF)\nrm(BS_RT_TEMP)\n\n\n\n4.3.6 Extract Bus Service Info to DataFrame\n\nPROCESS_BUS_SVC_DF &lt;- function(BUS_SERVICE){\n    BUS_SVC_DF &lt;- data.frame(Service_No = character(), Direction = integer(), Category = character(), AM_Peak_Freq = character(), AM_OffPeak_Freq = character(), PM_Peak_Freq = character(), PM_OffPeak_Freq = character(), LoopDesc = character())\n  for (svc in BUS_SERVICE){\n    BS_SVC_TEMP &lt;- data.frame(Service_No = svc$ServiceNo, Direction = as.numeric(svc$Direction), Category = svc$Category, AM_Peak_Freq = svc$AM_Peak_Freq, AM_OffPeak_Freq = svc$AM_Offpeak_Freq, PM_OffPeak_Freq = svc$PM_Offpeak_Freq, PM_Peak_Freq = svc$PM_Peak_Freq, LoopDesc = svc$LoopDesc)\n    \n    # data appears to have duplicated fields\n    if (nrow(BUS_SVC_DF %&gt;% filter(Service_No == BS_SVC_TEMP$Service_No & Direction == BS_SVC_TEMP$Direction)) == 0) {\n        BUS_SVC_DF[nrow(BUS_SVC_DF) +1,] &lt;- BS_SVC_TEMP  \n    }\n  }\n    \n    return (BUS_SVC_DF)\n}\n\n\nBUS_SVC_DF &lt;- PROCESS_BUS_SVC_DF(BUS_SERVICE)\nBUS_SVC_2021_07_DF &lt;- PROCESS_BUS_SVC_DF(BUS_SERVICE_2021_07)\n\n\n\n4.3.7 Discard Unneeded Variables\n\nrm(BUS_ROUTE)\nrm(BUS_SERVICE)\nrm(BUS_SERVICE_2021_07)\nrm(route)\nrm(svc)\nrm(bs)\nrm(route_info)\nrm(RAW_OD_2021_07)\nrm(RAW_OD_2022_08)\nrm(RAW_OD_2022_11)\nrm(RAW_OD_2023_11)\nrm(RAW_OD_2019_11)\nrm(BUS_ROUTE_2021_07)"
  },
  {
    "objectID": "explore/167_OD_analysis.html#normalisation-of-values",
    "href": "explore/167_OD_analysis.html#normalisation-of-values",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "6.1 Normalisation of values",
    "text": "6.1 Normalisation of values\nOD Matrix shows flows between pairs of bus stops. For bus stop pairs served by different services, they will contribute to the same OD count.\nThis is especially evident in certain bus stop pairs, such as BS 40189 Newton Stn Exit B to BS 09219 Far East Plaza, amongst others, where commuters would likely hop on any of the many buses along the road.\n\n6.1.0.1 Methodology\nWe will use this formula in calculating and estimating the OD flows for 167 bus stops using this formula below.\n&lt;insert latex formula&gt;\nBus Per Hour (BPH) for given service at given hour = 60 / Average Frequency at given timing for the given service*\n* if given service operates at 8 - 12 min during AM Peak, 10 minutes will be used, hence, computing a 10 min interval between buses and 6 buses per hour (bph)\nFlow between OD Pair for a given service at given hour = Total Flow between OD Pair at given hr x (BPH for given service at given hour / Sum of BPH on all services servicing between OD Pair at given hr) ^\n\n\n6.1.0.2 ^ Rules\n\nTrip distance of services shall not exceed 3km of mean distance of all services between the OD pair for normal services (non-express)\n\nIf services takes a large detour, we assume that passengers will not be inclined to take the detour of services since its longer\n\nExclusion of services that charges express fares (Express or City Direct) if OD pair is less than 5km (ie. shorter than ‘express’ sector)\n\nIssues with assumptions:\n\nAssumes uniform distribution across all services\nFor express services with express sectors, it is hard to estimate the split of passengers taking normal and express services - Assumption will be that they are equal\n\n\n\n6.1.0.3 Computing\nAs LTA’s data does not provide a differentiation for bus frequencies on weekdays and weekends, we will take the average time between the intervals provided\nAdditionally, we will derive the frequencies as follows:\n\nFor the following timings below, LTA’s definition will be used, we will use the average of the frequency band provided:\n\nAM Peak - 0630h to 0830h\nAM Off Peak - 0831h to 1659h\nPM Peak - 1700h to 1900h\nPM Off Peak - after 1900h\n\nFor the following timings below:\n\nFrom start of service to 0630h - We take upper limit of AM Peak frequency\n\n\n\n#Preprocess Bus Svc DF data to clean \n\nBUS_SVC_DF_temp &lt;- BUS_SVC_DF %&gt;%\n  mutate(AM_Peak_Freq = lapply(AM_Peak_Freq, function(val) {\n    if (val == \"-\") {\n      return(\"-\")  # Keep \"-\" as is\n    }\n    \n    parts &lt;- strsplit(val, \"-\")[[1]]\n    \n    if (length(parts) == 2 && parts[1] == parts[2]) {\n      return(as.numeric(parts[1]))  # If the range is the same, return as a single number\n    } else if (length(parts) == 2) {\n      return(as.numeric(parts))  # Split and return as a numeric list\n    } else {\n      return(as.numeric(val))  # Return as a single numeric value\n    }\n  })) %&gt;%\n  mutate(AM_OffPeak_Freq = lapply(AM_OffPeak_Freq, function(val) {\n    if (val == \"-\") {\n      return(\"-\")  # Keep \"-\" as is\n    }\n    \n    parts &lt;- strsplit(val, \"-\")[[1]]\n    \n    if (length(parts) == 2 && parts[1] == parts[2]) {\n      return(as.numeric(parts[1]))  # If the range is the same, return as a single number\n    } else if (length(parts) == 2) {\n      return(as.numeric(parts))  # Split and return as a numeric list\n    } else {\n      return(as.numeric(val))  # Return as a single numeric value\n    }\n  })) %&gt;%\n  mutate(PM_Peak_Freq = lapply(PM_Peak_Freq, function(val) {\n    if (val == \"-\") {\n      return(\"-\")  # Keep \"-\" as is\n    }\n    \n    parts &lt;- strsplit(val, \"-\")[[1]]\n    \n    if (length(parts) == 2 && parts[1] == parts[2]) {\n      return(as.numeric(parts[1]))  # If the range is the same, return as a single number\n    } else if (length(parts) == 2) {\n      return(as.numeric(parts))  # Split and return as a numeric list\n    } else {\n      return(as.numeric(val))  # Return as a single numeric value\n    }\n  })) %&gt;%\n  mutate(PM_OffPeak_Freq = lapply(PM_OffPeak_Freq, function(val) {\n    if (val == \"-\") {\n      return(\"-\")  # Keep \"-\" as is\n    }\n    \n    parts &lt;- strsplit(val, \"-\")[[1]]\n    \n    if (length(parts) == 2 && parts[1] == parts[2]) {\n      return(as.numeric(parts[1]))  # If the range is the same, return as a single number\n    } else if (length(parts) == 2) {\n      return(as.numeric(parts))  # Split and return as a numeric list\n    } else {\n      return(as.numeric(val))  # Return as a single numeric value\n    }\n  })) \n\n\nnorm_bph_checker &lt;- function(bph, BUS_SVC, DIR, BS_CODE_ORIGIN){\n  \n  if (is.na(bph)){\n    print(BUS_SVC)\n    print(DIR)\n    print(BS_CODE_ORIGIN)\n    bph &lt;- 0 #if unable to determine, zero the bph, fix this later\n    return (bph)\n  }\n  \n  return (bph)\n  \n}\n\nnorm_bph &lt;- function(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN, INPUT_BUS_SVC_DF, BUS_ROUTE_DF){\n  # check operational\n  temp_flag = FALSE\n  temp_flag1 = FALSE\n  temp_flag2 = FALSE\n\n  if (HOUR &lt; 3){\n    HOUR &lt;- HOUR + 24\n    if (NUM_DAY_OF_WEEK &gt; 1){\n      NUM_DAY_OF_WEEK &lt;- NUM_DAY_OF_WEEK - 1\n    }\n    else{\n      NUM_DAY_OF_WEEK &lt;- 7\n    }\n  }\n  \n  total_time &lt;- norm_bph_bs_operational(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN, BUS_ROUTE_DF)\n  if (total_time == -1){\n    return (0)\n  }\n  else {\n \n    SEL_BUS_SVC &lt;- INPUT_BUS_SVC_DF %&gt;% filter(Service_No == BUS_SVC & Direction == DIR)\n    \n    if (HOUR &gt;= 19){\n      # Legacy code has '15' instead of '15-15'\n      \n      if (SEL_BUS_SVC$PM_OffPeak_Freq == 0|| SEL_BUS_SVC$PM_OffPeak_Freq == \"-\"){\n        temp_flag = TRUE\n      }\n      \n      if (grepl(\"-\", SEL_BUS_SVC$PM_OffPeak_Freq) && temp_flag == FALSE){\n        time &lt;- strsplit(SEL_BUS_SVC$PM_OffPeak_Freq, \"-\")\n        if (as.numeric(time[[1]][1]) == 0 && (as.numeric(time[[1]][2]) == 0)) {\n          temp_flag = TRUE\n        }\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      else{\n        freq = as.numeric(SEL_BUS_SVC$PM_OffPeak_Freq)\n      }\n      \n      if (temp_flag == TRUE){\n        time &lt;- strsplit(SEL_BUS_SVC$PM_Peak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      \n      bph &lt;- total_time / freq\n      bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n    }\n    else if(HOUR &gt;= 17 && HOUR &lt; 19){\n      \n      if (SEL_BUS_SVC$PM_Peak_Freq == 0 || SEL_BUS_SVC$PM_Peak_Freq == \"-\"){\n        temp_flag = TRUE\n      }\n      \n      if (grepl(\"-\", SEL_BUS_SVC$PM_Peak_Freq) && temp_flag == FALSE){\n        time &lt;- strsplit(SEL_BUS_SVC$PM_Peak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2   \n        if (as.numeric(time[[1]][1]) == 0 && (as.numeric(time[[1]][2]) == 0)) {\n          temp_flag = TRUE\n        }\n      }\n      else{\n        freq = as.numeric(SEL_BUS_SVC$PM_Peak_Freq)\n      }\n      \n      if (temp_flag == TRUE){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_OffPeak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      \n      bph &lt;- total_time / freq\n      bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n    }\n    else if(HOUR &gt;= 9 && HOUR &lt; 17){\n      \n      if (SEL_BUS_SVC$AM_OffPeak_Freq == 0 || SEL_BUS_SVC$AM_OffPeak_Freq == \"-\"){\n        temp_flag = TRUE\n      }\n\n      if (grepl(\"-\", SEL_BUS_SVC$AM_OffPeak_Freq) && temp_flag == FALSE){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_OffPeak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n        if (as.numeric(time[[1]][1]) == 0 && (as.numeric(time[[1]][2]) == 0)) {\n          temp_flag = TRUE\n        }\n      }\n      else{\n        freq = as.numeric(SEL_BUS_SVC$AM_OffPeak_Freq)\n      }\n      \n      if (temp_flag == TRUE){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      \n      bph &lt;- total_time / freq\n      bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n    }    \n    else if(HOUR == 8){\n      \n      if (SEL_BUS_SVC$AM_Peak_Freq == 0 || SEL_BUS_SVC$AM_Peak_Freq == \"-\"){\n        temp_flag1 = TRUE\n      }\n\n      if (SEL_BUS_SVC$AM_OffPeak_Freq == 0 || SEL_BUS_SVC$AM_OffPeak_Freq == \"-\"){\n        temp_flag2 = TRUE\n      }\n      \n      if (grepl(\"-\", SEL_BUS_SVC$AM_Peak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq1 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n        if (length(time) == 2){\n          if (as.numeric(time[[1]][1]) == 0 && (as.numeric(time[[1]][2]) == 0)) {\n            temp_flag1 = TRUE\n          }\n        }\n      }\n      else{\n        freq1 = as.numeric(SEL_BUS_SVC$AM_Peak_Freq)\n      }\n      \n      if (grepl(\"-\", SEL_BUS_SVC$AM_OffPeak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_OffPeak_Freq, \"-\")\n        freq2 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n        if (length(time) == 2){\n          if (as.numeric(time[[1]][1]) == 0 && (as.numeric(time[[1]][2]) == 0)) {\n            temp_flag2 = TRUE\n          }\n        }\n      }\n      else{\n        freq2 = as.numeric(SEL_BUS_SVC$AM_OffPeak_Freq)\n      }\n      \n      if (total_time &lt;= 30){\n        if (temp_flag1 == TRUE){\n          bph &lt;- total_time / freq2\n          bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n        }\n        else if (temp_flag1 == TRUE && temp_flag2 == TRUE){\n          print(BUS_SVC)\n          print(DIR)\n          print(origin)\n          print(\"welp\")\n          bph &lt;- 0\n        }\n        else{\n          bph &lt;- total_time / freq1\n          bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n        }\n      }\n      else{\n        if (temp_flag1 == TRUE){\n          bph &lt;- total_time / freq2\n          bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n        }\n        else if (temp_flag2 == TRUE){\n          bph &lt;- total_time / freq1\n          bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n        }\n        else{\n          temp_bph &lt;- total_time / freq1\n          bph &lt;- ((((total_time) / freq2) + temp_bph) / 2)\n          bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n        }\n      }\n    }        \n    else if(HOUR == 7){\n      if (grepl(\"-\", SEL_BUS_SVC$AM_Peak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      else{\n        freq = as.numeric(SEL_BUS_SVC$AM_Peak_Freq)\n      }\n\n      bph &lt;- total_time / freq\n      \n      bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n    }  \n    else if(HOUR == 6){\n      \n      if (grepl(\"-\", SEL_BUS_SVC$AM_Peak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq1 &lt;- as.numeric(time[[1]][2])\n      }\n      else{\n        freq1 = as.numeric(SEL_BUS_SVC$AM_Peak_Freq)\n      }\n      \n      if (grepl(\"-\", SEL_BUS_SVC$AM_Peak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq2 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      }\n      else{\n        freq2 = as.numeric(SEL_BUS_SVC$AM_Peak_Freq)\n      }\n    \n      if (total_time &lt;= 30){\n        bph &lt;- total_time / freq1\n        bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n      }\n      else{\n        temp_bph &lt;- total_time / freq1\n        bph &lt;- ((((total_time - 30) / freq2) + temp_bph) / 2)\n        bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n\n      }\n    }  \n    else if(HOUR &gt;= 4 && HOUR &lt; 6){\n      \n      if (grepl(\"-\", SEL_BUS_SVC$AM_Peak_Freq)){\n        time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n        freq &lt;- as.numeric(time[[1]][2])\n      }\n      else{\n        freq = as.numeric(SEL_BUS_SVC$AM_Peak_Freq)\n      }\n      \n      bph &lt;- total_time / freq\n      bph &lt;- norm_bph_checker(bph, BUS_SVC, DIR, BS_CODE_ORIGIN)\n    }  \n    return (bph)\n    \n  }\n  \n}\n\nnorm_bph_bs_operational &lt;- function(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN, BUS_ROUTE_DF){\n  # BS_SEQ_ORIGIN verifies that it is the correct bus stop (eg. starting stop instead of ending terminus)\n  SEL_BUS_ROUTE &lt;- BUS_ROUTE_DF %&gt;% filter(Service_No == BUS_SVC & BS_Code == BS_CODE_ORIGIN & Direction == DIR & Seq == BS_SEQ_ORIGIN)\n  temp_timing &lt;- -1\n  if (NUM_DAY_OF_WEEK &gt; 0 & NUM_DAY_OF_WEEK &lt; 6){\n    if (is.na(SEL_BUS_ROUTE$WD_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$WD_LastBus &lt; 3 * 100){\n      WD_LastBus &lt;- 2400 + SEL_BUS_ROUTE$WD_LastBus\n    }\n    else{\n      WD_LastBus &lt;- SEL_BUS_ROUTE$WD_LastBus\n    }\n    if ((SEL_BUS_ROUTE$WD_FirstBus &lt; (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$WD_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- WD_LastBus - as.numeric(HOUR) * 100 \n    }\n    else if ((SEL_BUS_ROUTE$WD_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$WD_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$WD_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$WD_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$WD_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- WD_LastBus - SEL_BUS_ROUTE$WD_FirstBus\n    }\n    else{\n      return(-1) # Not operational\n    }\n  } \n  else if (NUM_DAY_OF_WEEK == 6){\n    if (is.na(SEL_BUS_ROUTE$SAT_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$SAT_LastBus &lt; 3 * 100){\n      Sat_LastBus &lt;- 2400 + SEL_BUS_ROUTE$SAT_LastBus\n    }\n    else{\n      Sat_LastBus &lt;- SEL_BUS_ROUTE$SAT_LastBus\n    }\n    if ((SEL_BUS_ROUTE$SAT_FirstBus &lt; (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SAT_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sat_LastBus - as.numeric(HOUR) * 100\n    }\n    else if ((SEL_BUS_ROUTE$SAT_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SAT_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$SAT_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$SAT_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SAT_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sat_LastBus - SEL_BUS_ROUTE$SAT_FirstBus\n    }\n  } \n  else if (NUM_DAY_OF_WEEK == 7){\n    if (is.na(SEL_BUS_ROUTE$SUN_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$SUN_LastBus &lt; 3 * 100){\n      Sun_LastBus &lt;- 2400 + SEL_BUS_ROUTE$SUN_LastBus\n    }\n    else{\n      Sun_LastBus &lt;- SEL_BUS_ROUTE$SUN_LastBus\n    }\n    if ((SEL_BUS_ROUTE$SUN_FirstBus &lt; (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SUN_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sun_LastBus - as.numeric(HOUR) * 100\n    }\n    else if ((SEL_BUS_ROUTE$SUN_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SUN_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$SUN_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$SUN_FirstBus == (as.numeric(HOUR) * 100)) && (SEL_BUS_ROUTE$SUN_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sun_LastBus - SEL_BUS_ROUTE$SUN_FirstBus\n    }\n  }\n  \n  if (temp_timing &gt; 60){\n    return (60)\n  }\n  else{\n    return (temp_timing)\n  }\n}\n\nnorm_common_bus_svcs &lt;- function(BS_CODE_ORIGIN, BS_CODE_DEST, BUS_ROUTE_DF){\n  TEMP_BUS_ROUTE_DF &lt;- BUS_ROUTE_DF[1:5]\n  # Filter ensures correct pairs are selected (in event of start/end stop same) and filters out inaccurate data where stops are recorded in reverse (eg. 167 Nov 8am Weekday data between 3218 and 3129)\n  TEMP_BUS_ROUTE_DF &lt;- left_join(TEMP_BUS_ROUTE_DF, TEMP_BUS_ROUTE_DF, by=c(\"Service_No\", \"Direction\"), suffix=c(\"Origin\", \"Dest\"))\n  \n  TEMP_BUS_ROUTE_OD_PAIR &lt;- TEMP_BUS_ROUTE_DF %&gt;% filter(BS_CodeOrigin == BS_CODE_ORIGIN & BS_CodeDest == BS_CODE_DEST & SeqOrigin &lt; SeqDest)\n  \n  return (TEMP_BUS_ROUTE_OD_PAIR)\n}\n\nnorm_verify_express &lt;- function(BUS_SVC, DIR, INPUT_BUS_SVC_DF){\n  SEL_BUS_SVC &lt;- INPUT_BUS_SVC_DF %&gt;% filter(Service_No == BUS_SVC & DIR == Direction)\n  BUS_CAT &lt;- c(\"CITY_LINK\", \"EXPRESS\")\n  if (SEL_BUS_SVC$Category %in% BUS_CAT){\n    return (FALSE)\n  }\n  return (TRUE)\n}\n\nnorm_calc_bph &lt;- function(BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC, DIR, INPUT_BUS_SVC_DF, BUS_ROUTE_DF){\n  common_svcs &lt;- norm_common_bus_svcs(BS_CODE_ORIGIN, BS_CODE_DEST, BUS_ROUTE_DF)\n  common_svcs &lt;- common_svcs %&gt;% mutate(mileage = DistanceDest - DistanceOrigin)\n  mean_mileage &lt;- mean(common_svcs$mileage)\n  \n  bph_total &lt;- 0\n  bph_svc &lt;- 0\n  \n  # if no rows (ie. all invalid data, dont run bph)\n  if (nrow(common_svcs) &gt; 0){\n    for (i in 1:nrow(common_svcs)) {\n      if (common_svcs[i,]$mileage &lt;= mean_mileage + 3){\n        temp_bph &lt;- norm_bph(common_svcs[i,]$Service_No, common_svcs[i,]$Direction, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, common_svcs[i,]$SeqOrigin, INPUT_BUS_SVC_DF, BUS_ROUTE_DF)\n        if (common_svcs[i,]$Service_No == SVC){\n          bph_svc &lt;- temp_bph\n          bph_total &lt;- bph_total + temp_bph\n        }\n        # Let us verify for express service\n        else if (common_svcs[i,]$mileage &lt;= 5){\n          if (norm_verify_express(common_svcs[i,]$Service_No, common_svcs[i,]$Direction, INPUT_BUS_SVC_DF)){\n            bph_total &lt;- bph_total + temp_bph\n          }\n        }\n        else{\n          bph_total &lt;- bph_total + temp_bph\n        }\n      }\n    }\n  }\n  \n  bph &lt;- list(bph_svc, bph_total)\n  \n  return (bph)\n}\n\n\nnorm_flow_od &lt;- function(FLOW, BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC, DIR, INPUT_BUS_SVC_DF, BUS_ROUTE_DF){\n  bph &lt;- norm_calc_bph(BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC, DIR, INPUT_BUS_SVC_DF, BUS_ROUTE_DF)\n  bph_svc &lt;- bph[[1]]\n  bph_total &lt;- bph[[2]]\n  svc_flow &lt;- FLOW * (bph_svc / bph_total)\n  if (is.nan(svc_flow)){\n    return (0)\n  }\n  return (svc_flow)\n}"
  },
  {
    "objectID": "explore/167_OD_analysis.html#generating-flows",
    "href": "explore/167_OD_analysis.html#generating-flows",
    "title": "Effects of Thomson East Coast Line on Bus Service 167",
    "section": "6.2 Generating Flows",
    "text": "6.2 Generating Flows\n\ngen_od_timing_flows &lt;- function(input_OD, sf_bs, timing, INPUT_BUS_SVC_DF, BUS_ROUTE_DF){ \n  OD_TEST_DIR1 &lt;- input_OD %&gt;% filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR == timing)\n  \n  #norm_flow_od &lt;- function(FLOW, BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC){\n  OD_TEST_DIR1 &lt;- OD_TEST_DIR1 %&gt;% rowwise() %&gt;%  mutate(NORM_TRIPS = (norm_flow_od(TOTAL_TRIPS, ORIGIN_PT_CODE, DESTINATION_PT_CODE, TIME_PER_HOUR, 1, \"167\", 1, INPUT_BUS_SVC_DF, BUS_ROUTE_DF)))\n  \n  OD &lt;- left_join(OD_TEST_DIR1 , sf_bs, by = c(\"ORIGIN_PT_CODE\" = \"BS_Code\")) %&gt;% rename(ORIGIN_BS = ORIGIN_PT_CODE, ORIGIN_PA = PLN_AREA_C, DESTIN_BS = DESTINATION_PT_CODE)\n  \n  OD &lt;- left_join(OD , sf_bs, by = c(\"DESTIN_BS\" = \"BS_Code\"))\n  \n  return (OD) \n}\n\ngen_od_timing_PA &lt;- function(OD_PA){ \n\n    OD_PA &lt;- OD_PA %&gt;% rename(DESTIN_PA = PLN_AREA_C) %&gt;% drop_na() %&gt;% group_by(ORIGIN_PA, DESTIN_PA) %&gt;% summarise(PA_TRIPS = sum(NORM_TRIPS))\n\nreturn (OD_PA) \n}\n\ngen_od_timing_PA_intra &lt;- function(OD_PA){ \n  OD_PA_INTRA &lt;- OD_PA[OD_PA$ORIGIN_PA!=OD_PA$DESTIN_PA,] \n  return (OD_PA_INTRA) \n}\n\ngen_od_timing_PA_inter &lt;- function(OD_PA){ \n  OD_PA_INTER &lt;- OD_PA[OD_PA$ORIGIN_PA==OD_PA$DESTIN_PA,] \n  return (OD_PA_INTER) \n}\n\ngen_od_timing_PA_flows &lt;- function(OD_PA_INTRA){\n\nsf_OD_PA_INTRA_FLOWS &lt;- od2line(flow = OD_PA_INTRA, zones = mpsz_pln_area, zone_code = \"PLN_AREA_C\")\n\nreturn (sf_OD_PA_INTRA_FLOWS) \n} \ntmap_plot_pa &lt;- function(BS, OD) { \n  tmap_mode(\"view\") \n  tm_shape(mpsz_pln_area) + \n    tm_polygons(\"PLN_AREA_C\", legend.show = FALSE, palette=\"Set3\") + \n  tm_shape(BS) + \n    tm_dots(\"PLN_AREA_C\", scale = 1.3, legend.show = FALSE, palette=\"Set3\") + \n  #tm_shape(sf_BS_167_DIR_2) + \n    # tm_dots(col = \"blue\", scale = 2) + \n  tm_shape(OD) + \n    tm_lines(col = \"PA_TRIPS\", style=\"fixed\", breaks = c(0, 1, 5, 10, 15, 25, 50, 80, 130, 250), lwd = \"PA_TRIPS\", scale=20, palette=\"viridis\") \n} \n\nplot_trip_summary &lt;- function(OD){ \n  summary(OD$NORM_TRIPS) \n  p &lt;- ggplot(OD, aes(x=NORM_TRIPS)) + geom_histogram(binwidth=25) + xlim(0, 500) + ylim(0, 50)\n  ggplotly(p) \n}\n\nPre-generate results\n\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 6, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_6.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 7, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 8, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 9, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 10, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 11, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 12, BUS_SVC_DF, BUS_ROUTE_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_12.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 18, BUS_SVC_DF, BUS_ROUTE_DF)\n\n#saveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_18.rds\")\n#temp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 19, BUS_SVC_DF)\n#saveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_19.rds\")\n#temp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 20, BUS_SVC_DF)\n#saveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_20.rds\")\n\n\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 6, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_6.rds\")\n\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 7, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 8, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 9, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 10, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 11, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2019_11_DIR1, BUS_STOP_DF_MPSZ, 12, BUS_SVC_2021_07_DF, BUS_ROUTE_2021_07_DF)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_2019_11_norm_12.rds\")\n\n\n6amjjjj7am8am9am10am11am12pm\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_6.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         YS        AM 54.74234771\n2         AM        BS 38.51508192\n3         SB        YS 25.77903551\n4         YS        BS 15.42857143\n5         YS        NV  9.19047619\n6         YS        TP  9.14285714\n7         SB        BS  6.19532364\n8         SB        TP  4.83033932\n9         SB        AM  4.21642429\n10        YS        OR  3.85714286\n11        SB        OR  3.61904762\n12        AM        TP  3.42857143\n13        YS        DT  3.28571429\n14        AM        OR  2.38095238\n15        AM        NV  2.28571429\n16        AM        DT  2.23809524\n17        SB        BM  1.76190476\n18        AM        MU  1.28571429\n19        YS        NT  1.28571429\n20        SB        NV  1.26603935\n21        SB        NT  0.85714286\n22        BS        TP  0.83564537\n23        YS        BM  0.80952381\n24        YS        MU  0.66666667\n25        BS        OR  0.55535831\n26        BS        DT  0.50757576\n27        SB        MU  0.33333333\n28        SB        DT  0.28571429\n29        AM        NT  0.19047619\n30        BS        NV  0.18881430\n31        AM        BM  0.04761905\n32        BS        MU  0.01839827\n33        BS        BM  0.00000000\n34        BS        NT  0.00000000\n35        DT        BM  0.00000000\n36        MU        BM  0.00000000\n37        MU        DT  0.00000000\n38        NT        BM  0.00000000\n39        NT        DT  0.00000000\n40        NT        MU  0.00000000\n41        NT        OR  0.00000000\n42        NV        BM  0.00000000\n43        NV        DT  0.00000000\n44        NV        MU  0.00000000\n45        NV        NT  0.00000000\n46        NV        OR  0.00000000\n47        OR        BM  0.00000000\n48        OR        DT  0.00000000\n49        OR        MU  0.00000000\n50        TP        BM  0.00000000\n51        TP        DT  0.00000000\n52        TP        MU  0.00000000\n53        TP        NT  0.00000000\n54        TP        NV  0.00000000\n55        TP        OR  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           71.6 \n 2 SB        SB            3.57\n 3 BS        BS            1.68\n 4 AM        AM            1.21\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2019_11_norm_6.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA  PA_TRIPS\n1         AM        BS 786.05784\n2         YS        BS 774.85714\n3         SB        YS 679.77357\n4         YS        AM 425.14286\n5         SB        BS 320.30898\n6         YS        TP 286.28571\n7         YS        OR 252.00000\n8         SB        AM 246.06193\n9         SB        DT 157.71429\n10        YS        NV 155.14286\n11        YS        DT 126.00000\n12        YS        NT 108.00000\n13        SB        TP 107.82602\n14        SB        OR 103.71429\n15        AM        NV  87.42857\n16        YS        MU  81.42857\n17        AM        OR  72.85714\n18        SB        MU  71.14286\n19        AM        TP  70.28571\n20        SB        NT  55.71429\n21        SB        NV  49.52949\n22        YS        BM  39.42857\n23        SB        BM  35.14286\n24        AM        BM  31.71429\n25        AM        MU  25.71429\n26        AM        DT  18.00000\n27        AM        NT   6.00000\n28        BS        BM   0.00000\n29        BS        DT   0.00000\n30        BS        MU   0.00000\n31        BS        NT   0.00000\n32        BS        NV   0.00000\n33        BS        OR   0.00000\n34        BS        TP   0.00000\n35        DT        BM   0.00000\n36        MU        BM   0.00000\n37        MU        DT   0.00000\n38        NT        BM   0.00000\n39        NT        DT   0.00000\n40        NT        MU   0.00000\n41        NT        OR   0.00000\n42        NV        BM   0.00000\n43        NV        DT   0.00000\n44        NV        MU   0.00000\n45        NV        NT   0.00000\n46        NV        OR   0.00000\n47        OR        BM   0.00000\n48        OR        DT   0.00000\n49        OR        MU   0.00000\n50        TP        BM   0.00000\n51        TP        DT   0.00000\n52        TP        MU   0.00000\n53        TP        NT   0.00000\n54        TP        NV   0.00000\n55        TP        OR   0.00000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           895. \n 2 SB        SB            89.1\n 3 AM        AM            47.5\n 4 BM        BM             0  \n 5 BS        BS             0  \n 6 DT        DT             0  \n 7 MU        MU             0  \n 8 NT        NT             0  \n 9 NV        NV             0  \n10 OR        OR             0  \n11 TP        TP             0  \n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         YS        AM 33.57826831\n2         SB        YS 31.09948302\n3         AM        BS 28.73420840\n4         YS        BS 11.18796992\n5         OR        DT 10.57549732\n6         SB        AM  9.85964912\n7         NV        DT  9.61231495\n8         NV        NT  9.10384571\n9         MU        DT  9.05398997\n10        BS        NV  8.55373148\n11        NT        OR  7.77622980\n12        SB        BS  7.39097744\n13        BS        TP  5.89719357\n14        NV        OR  5.80429713\n15        YS        OR  5.47619048\n16        DT        BM  5.15935139\n17        AM        TP  5.15288221\n18        TP        NV  4.82434563\n19        YS        NV  4.66917293\n20        AM        OR  4.57142857\n21        AM        NV  3.88471178\n22        NT        BM  3.73729941\n23        NV        MU  3.31962520\n24        YS        DT  2.71428571\n25        BS        OR  2.38187633\n26        YS        TP  2.26566416\n27        BS        DT  2.07088989\n28        AM        MU  2.00000000\n29        TP        OR  1.96015832\n30        NV        BM  1.76207235\n31        OR        BM  1.66452805\n32        OR        MU  1.54323233\n33        SB        DT  1.52380952\n34        TP        DT  1.47252747\n35        AM        DT  1.38095238\n36        YS        NT  1.33333333\n37        SB        TP  1.22055138\n38        NT        DT  1.12380952\n39        TP        NT  1.11875822\n40        MU        BM  0.88216961\n41        AM        NT  0.85714286\n42        BS        BM  0.82509158\n43        BS        NT  0.80000000\n44        BS        MU  0.78095238\n45        YS        MU  0.76190476\n46        SB        OR  0.61904762\n47        TP        MU  0.59047619\n48        SB        MU  0.57142857\n49        SB        NV  0.48120301\n50        TP        BM  0.44041154\n51        SB        BM  0.42857143\n52        NT        MU  0.37895761\n53        YS        BM  0.23809524\n54        AM        BM  0.19047619\n55        SB        NT  0.04761905\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          40.9  \n 2 BM        BM          20.7  \n 3 SB        SB           8.32 \n 4 BS        BS           5.22 \n 5 DT        DT           2.40 \n 6 MU        MU           2.01 \n 7 TP        TP           1.66 \n 8 NV        NV           1.65 \n 9 OR        OR           1.33 \n10 AM        AM           1.24 \n11 NT        NT           0.279\n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2019_11_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         AM        BS 1509.72857\n2         SB        YS 1238.18966\n3         SB        AM  677.78571\n4         YS        BS  650.18571\n5         YS        AM  595.02857\n6         SB        BS  440.70000\n7         YS        OR  325.71429\n8         YS        DT  316.28571\n9         YS        NT  266.57143\n10        AM        TP  210.42857\n11        YS        NV  205.41429\n12        AM        NV  159.00000\n13        YS        TP  152.65714\n14        AM        OR  150.85714\n15        BS        TP  134.85285\n16        SB        OR  127.71429\n17        YS        MU  112.28571\n18        BS        NV   89.84221\n19        SB        DT   81.42857\n20        SB        NV   78.77143\n21        AM        DT   78.00000\n22        SB        NT   78.00000\n23        SB        TP   73.50000\n24        BS        OR   62.11296\n25        SB        MU   60.00000\n26        AM        MU   54.85714\n27        AM        NT   51.42857\n28        BS        DT   18.68571\n29        BS        BM   17.03571\n30        BS        NT   15.42857\n31        SB        BM   15.42857\n32        BS        MU   13.02857\n33        AM        BM   10.28571\n34        YS        BM   10.28571\n35        DT        BM    0.00000\n36        MU        BM    0.00000\n37        MU        DT    0.00000\n38        NT        BM    0.00000\n39        NT        DT    0.00000\n40        NT        MU    0.00000\n41        NT        OR    0.00000\n42        NV        BM    0.00000\n43        NV        DT    0.00000\n44        NV        MU    0.00000\n45        NV        NT    0.00000\n46        NV        OR    0.00000\n47        OR        BM    0.00000\n48        OR        DT    0.00000\n49        OR        MU    0.00000\n50        TP        BM    0.00000\n51        TP        DT    0.00000\n52        TP        MU    0.00000\n53        TP        NT    0.00000\n54        TP        NV    0.00000\n55        TP        OR    0.00000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           875. \n 2 BS        BS           241. \n 3 SB        SB           195. \n 4 AM        AM            64.0\n 5 BM        BM             0  \n 6 DT        DT             0  \n 7 MU        MU             0  \n 8 NT        NT             0  \n 9 NV        NV             0  \n10 OR        OR             0  \n11 TP        TP             0  \n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         YS        AM 54.2710323\n2         AM        BS 31.6403363\n3         MU        DT 30.5803798\n4         SB        YS 28.7579756\n5         NV        OR 18.0658537\n6         OR        DT 17.9298779\n7         NV        NT 17.8644522\n8         NV        DT 14.8688962\n9         NT        OR 13.1950568\n10        YS        BS 11.1175987\n11        BS        NV  9.1853777\n12        DT        BM  8.2857811\n13        SB        AM  8.0134077\n14        BS        OR  6.8846852\n15        TP        NV  6.3871104\n16        BS        TP  6.0623215\n17        NV        MU  5.7794747\n18        SB        BS  5.2853683\n19        NT        BM  5.1880693\n20        OR        BM  4.8051573\n21        YS        OR  3.9523810\n22        NV        BM  3.7346189\n23        YS        NV  3.6384672\n24        OR        MU  3.2319503\n25        AM        NV  2.8946412\n26        AM        DT  2.8571429\n27        BS        DT  2.7208639\n28        TP        OR  2.5683165\n29        YS        TP  2.5591454\n30        MU        BM  2.2396705\n31        SB        OR  2.0000000\n32        AM        OR  1.8571429\n33        NT        DT  1.7244444\n34        TP        NT  1.7220120\n35        SB        NV  1.6173608\n36        TP        DT  1.5734196\n37        YS        NT  1.5714286\n38        BS        BM  1.4939711\n39        BS        MU  1.2793651\n40        AM        MU  1.2380952\n41        SB        DT  1.1428571\n42        YS        DT  1.1428571\n43        NT        MU  0.9330574\n44        SB        BM  0.9047619\n45        SB        MU  0.8571429\n46        YS        MU  0.8571429\n47        BS        NT  0.7932275\n48        TP        BM  0.7242923\n49        SB        NT  0.7142857\n50        AM        TP  0.6502746\n51        TP        MU  0.6158730\n52        AM        BM  0.5238095\n53        AM        NT  0.5238095\n54        YS        BM  0.5238095\n55        SB        TP  0.3106700\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          42.4  \n 2 BM        BM          23.3  \n 3 SB        SB          15.9  \n 4 BS        BS           8.02 \n 5 DT        DT           6.40 \n 6 MU        MU           6.15 \n 7 NV        NV           4.37 \n 8 OR        OR           3.33 \n 9 TP        TP           1.72 \n10 AM        AM           0.927\n11 NT        NT           0.388\n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         YS        AM 34.07596623\n2         SB        YS 30.11558226\n3         MU        DT 17.50312366\n4         AM        BS 13.74581896\n5         NV        NT 13.31479073\n6         NT        OR 10.42373226\n7         YS        BS  9.81361332\n8         NV        OR  9.26508277\n9         BS        OR  8.89583921\n10        BS        NV  8.82433153\n11        NV        DT  8.64074929\n12        SB        AM  8.07348055\n13        OR        DT  7.92913657\n14        DT        BM  6.91241364\n15        BS        TP  6.71294019\n16        TP        NV  4.97525238\n17        SB        BS  4.85434345\n18        AM        OR  3.95454545\n19        NT        BM  3.92788997\n20        NV        MU  3.40236268\n21        TP        OR  3.30260869\n22        YS        OR  3.22727273\n23        AM        NV  2.63637230\n24        OR        BM  2.47676305\n25        YS        NV  2.31003753\n26        YS        TP  2.16785282\n27        NV        BM  2.11790061\n28        BS        NT  2.01718518\n29        BS        DT  1.97900894\n30        MU        BM  1.96673914\n31        AM        DT  1.54545455\n32        BS        MU  1.45079869\n33        SB        NV  1.32401155\n34        TP        NT  1.29948458\n35        OR        MU  1.25179954\n36        SB        TP  1.14569120\n37        AM        TP  1.04896104\n38        SB        OR  1.04545455\n39        NT        DT  0.99672158\n40        AM        NT  0.90909091\n41        SB        BM  0.86363636\n42        YS        BM  0.72727273\n43        YS        DT  0.72727273\n44        BS        BM  0.64610641\n45        TP        DT  0.64566814\n46        AM        MU  0.54545455\n47        SB        MU  0.50000000\n48        YS        MU  0.45454545\n49        NT        MU  0.42109735\n50        SB        DT  0.40909091\n51        YS        NT  0.22727273\n52        TP        BM  0.19808992\n53        SB        NT  0.13636364\n54        AM        BM  0.04545455\n55        TP        MU  0.04529843\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_PA [10]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM          28.8  \n 2 YS        YS          23.6  \n 3 SB        SB          15.9  \n 4 BS        BS           5.05 \n 5 MU        MU           4.37 \n 6 NV        NV           3.10 \n 7 DT        DT           2.53 \n 8 TP        TP           1.18 \n 9 AM        AM           0.483\n10 NT        NT           0.443\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         YS        AM 44.4343029\n2         SB        YS 30.5689412\n3         AM        BS 30.0865350\n4         YS        BS 10.2073733\n5         BS        OR  6.8376469\n6         BS        NV  6.2699710\n7         SB        BS  4.7250384\n8         SB        AM  4.5161290\n9         BS        TP  4.4519105\n10        AM        OR  4.2380952\n11        YS        OR  2.9047619\n12        YS        NV  2.5145929\n13        SB        OR  2.3333333\n14        AM        NV  1.8156682\n15        YS        DT  1.5714286\n16        YS        TP  1.4976959\n17        BS        DT  1.3604724\n18        BS        MU  1.2505495\n19        SB        BM  1.1428571\n20        SB        MU  1.0952381\n21        BS        NT  1.0373626\n22        AM        TP  1.0368664\n23        AM        MU  0.9047619\n24        SB        TP  0.8663594\n25        SB        NV  0.7987711\n26        BS        BM  0.6570839\n27        YS        BM  0.6190476\n28        YS        MU  0.5714286\n29        YS        NT  0.5238095\n30        SB        NT  0.4761905\n31        SB        DT  0.4285714\n32        AM        DT  0.3333333\n33        AM        BM  0.2857143\n34        AM        NT  0.1904762\n35        DT        BM  0.0000000\n36        MU        BM  0.0000000\n37        MU        DT  0.0000000\n38        NT        BM  0.0000000\n39        NT        DT  0.0000000\n40        NT        MU  0.0000000\n41        NT        OR  0.0000000\n42        NV        BM  0.0000000\n43        NV        DT  0.0000000\n44        NV        MU  0.0000000\n45        NV        NT  0.0000000\n46        NV        OR  0.0000000\n47        OR        BM  0.0000000\n48        OR        DT  0.0000000\n49        OR        MU  0.0000000\n50        TP        BM  0.0000000\n51        TP        DT  0.0000000\n52        TP        MU  0.0000000\n53        TP        NT  0.0000000\n54        TP        NV  0.0000000\n55        TP        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           40.8 \n 2 SB        SB           11.0 \n 3 BS        BS            9.45\n 4 AM        AM            2.12\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         SB        YS 23.52388899\n2         NT        OR 13.11159840\n3         YS        AM 12.39929348\n4         AM        BS 11.78810901\n5         NV        OR 10.87292276\n6         YS        BS  9.78056426\n7         MU        DT  9.75765634\n8         BS        OR  8.58422589\n9         NV        NT  7.58918104\n10        OR        DT  7.03574694\n11        DT        BM  4.92796058\n12        BS        NV  4.82779222\n13        YS        OR  4.13636364\n14        SB        BS  3.89341693\n15        NV        DT  3.65195039\n16        TP        NV  3.55175622\n17        TP        OR  3.01961239\n18        BS        TP  2.80914925\n19        AM        OR  2.77272727\n20        YS        NV  2.60188088\n21        NV        MU  2.44651958\n22        OR        BM  2.42647067\n23        SB        OR  2.18181818\n24        BS        MU  1.89445300\n25        NV        BM  1.78671034\n26        AM        NV  1.62225705\n27        NT        DT  1.43297381\n28        OR        MU  1.36214865\n29        NT        BM  1.35217723\n30        YS        TP  1.34012539\n31        MU        BM  1.33266058\n32        BS        NT  1.32819723\n33        YS        DT  1.27272727\n34        BS        DT  1.26668396\n35        SB        NV  1.21159875\n36        TP        NT  1.12547902\n37        SB        AM  1.03291536\n38        YS        BM  0.81818182\n39        SB        BM  0.81818182\n40        AM        DT  0.72727273\n41        YS        MU  0.68181818\n42        TP        DT  0.58636946\n43        TP        MU  0.54930663\n44        AM        TP  0.51724138\n45        SB        MU  0.50000000\n46        AM        MU  0.45454545\n47        AM        NT  0.45454545\n48        NT        MU  0.44581990\n49        SB        TP  0.37304075\n50        SB        DT  0.27272727\n51        YS        NT  0.27272727\n52        BS        BM  0.22477889\n53        AM        BM  0.13636364\n54        TP        BM  0.12397456\n55        SB        NT  0.04545455\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM          18.6  \n 2 YS        YS          16.4  \n 3 SB        SB           7.07 \n 4 BS        BS           3.66 \n 5 MU        MU           2.52 \n 6 DT        DT           2.13 \n 7 OR        OR           2.07 \n 8 NV        NV           1.82 \n 9 AM        AM           0.765\n10 TP        TP           0.503\n11 NT        NT           0.201\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         AM        BS 21.2747834\n2         SB        YS 21.0954385\n3         YS        AM 17.7397835\n4         YS        BS  9.4700461\n5         BS        OR  8.6380552\n6         BS        NV  5.1985960\n7         YS        OR  3.8095238\n8         BS        TP  3.2914145\n9         AM        OR  2.8571429\n10        YS        NV  2.8371736\n11        SB        BS  2.8033794\n12        AM        NV  1.9508449\n13        BS        MU  1.9047619\n14        SB        NV  1.8986175\n15        SB        OR  1.7142857\n16        AM        MU  1.5238095\n17        SB        AM  1.4270353\n18        YS        TP  1.3133641\n19        BS        DT  1.1970846\n20        SB        BM  1.1428571\n21        AM        DT  0.9523810\n22        AM        TP  0.9216590\n23        SB        DT  0.9047619\n24        YS        MU  0.9047619\n25        SB        MU  0.8095238\n26        YS        BM  0.6666667\n27        YS        DT  0.6666667\n28        BS        NT  0.6527473\n29        BS        BM  0.5867891\n30        SB        TP  0.3010753\n31        AM        NT  0.2857143\n32        YS        NT  0.2857143\n33        SB        NT  0.1904762\n34        AM        BM  0.0952381\n35        DT        BM  0.0000000\n36        MU        BM  0.0000000\n37        MU        DT  0.0000000\n38        NT        BM  0.0000000\n39        NT        DT  0.0000000\n40        NT        MU  0.0000000\n41        NT        OR  0.0000000\n42        NV        BM  0.0000000\n43        NV        DT  0.0000000\n44        NV        MU  0.0000000\n45        NV        NT  0.0000000\n46        NV        OR  0.0000000\n47        OR        BM  0.0000000\n48        OR        DT  0.0000000\n49        OR        MU  0.0000000\n50        TP        BM  0.0000000\n51        TP        DT  0.0000000\n52        TP        MU  0.0000000\n53        TP        NT  0.0000000\n54        TP        NV  0.0000000\n55        TP        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           36.5 \n 2 SB        SB            7.18\n 3 BS        BS            6.70\n 4 AM        AM            1.56\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         SB        YS 23.70643555\n2         NT        OR 14.98442916\n3         NV        OR 11.10588830\n4         AM        BS 10.01186494\n5         BS        OR  9.52055775\n6         YS        BS  7.35893417\n7         MU        DT  6.41002806\n8         DT        BM  6.02473026\n9         YS        AM  5.66385857\n10        OR        DT  5.47792942\n11        BS        NV  4.76305766\n12        YS        OR  4.45454545\n13        SB        BS  4.41849530\n14        NV        NT  4.34459988\n15        AM        OR  3.68181818\n16        TP        OR  3.17858732\n17        YS        NV  3.05172414\n18        OR        MU  2.41135024\n19        NV        MU  2.39306248\n20        TP        NV  2.35968691\n21        BS        MU  2.33590139\n22        BS        TP  2.04174059\n23        NV        DT  1.70338534\n24        SB        OR  1.54545455\n25        OR        BM  1.54499142\n26        BS        DT  1.41859994\n27        YS        TP  1.36363636\n28        MU        BM  1.23805997\n29        YS        MU  1.22727273\n30        AM        NV  1.22100313\n31        SB        NV  1.05015674\n32        AM        MU  1.04545455\n33        SB        AM  1.01880878\n34        NT        BM  0.97191472\n35        YS        DT  0.81818182\n36        NV        BM  0.80058152\n37        BS        NT  0.71417565\n38        YS        BM  0.68181818\n39        TP        DT  0.63788051\n40        AM        DT  0.63636364\n41        YS        NT  0.63636364\n42        AM        TP  0.61128527\n43        NT        MU  0.57601644\n44        SB        BM  0.54545455\n45        BS        BM  0.50150790\n46        AM        NT  0.50000000\n47        TP        NT  0.46359864\n48        SB        DT  0.45454545\n49        TP        MU  0.40600924\n50        SB        TP  0.37147335\n51        SB        MU  0.36363636\n52        NT        DT  0.35593220\n53        AM        BM  0.31818182\n54        TP        BM  0.05122898\n55        SB        NT  0.04545455\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM          17.0  \n 2 YS        YS          14.4  \n 3 SB        SB           7.38 \n 4 BS        BS           3.62 \n 5 OR        OR           1.88 \n 6 MU        MU           1.59 \n 7 NV        NV           1.25 \n 8 DT        DT           1.09 \n 9 AM        AM           0.472\n10 TP        TP           0.275\n11 NT        NT           0.110\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         AM        BS 23.1021945\n2         SB        YS 21.1604270\n3         YS        AM  9.5641540\n4         BS        NV  8.9579231\n5         YS        BS  6.6820276\n6         BS        OR  6.4885775\n7         SB        BS  3.5437788\n8         YS        OR  3.4285714\n9         BS        TP  3.2688161\n10        AM        OR  3.0476190\n11        YS        NV  2.4992320\n12        BS        MU  1.8095238\n13        AM        NV  1.7250384\n14        AM        MU  1.5238095\n15        SB        OR  1.3333333\n16        YS        MU  1.2380952\n17        SB        AM  1.2104455\n18        YS        TP  1.1059908\n19        BS        DT  0.9648447\n20        SB        BM  0.9523810\n21        YS        BM  0.9047619\n22        SB        NV  0.7803379\n23        SB        DT  0.7619048\n24        AM        DT  0.6666667\n25        SB        NT  0.6666667\n26        BS        BM  0.6369320\n27        SB        MU  0.5714286\n28        SB        TP  0.4685100\n29        YS        DT  0.4285714\n30        AM        TP  0.4147465\n31        AM        NT  0.3809524\n32        BS        NT  0.3142857\n33        AM        BM  0.2857143\n34        YS        NT  0.2857143\n35        DT        BM  0.0000000\n36        MU        BM  0.0000000\n37        MU        DT  0.0000000\n38        NT        BM  0.0000000\n39        NT        DT  0.0000000\n40        NT        MU  0.0000000\n41        NT        OR  0.0000000\n42        NV        BM  0.0000000\n43        NV        DT  0.0000000\n44        NV        MU  0.0000000\n45        NV        NT  0.0000000\n46        NV        OR  0.0000000\n47        OR        BM  0.0000000\n48        OR        DT  0.0000000\n49        OR        MU  0.0000000\n50        TP        BM  0.0000000\n51        TP        DT  0.0000000\n52        TP        MU  0.0000000\n53        TP        NT  0.0000000\n54        TP        NV  0.0000000\n55        TP        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           41.5 \n 2 SB        SB            9.21\n 3 BS        BS            7.51\n 4 AM        AM            4.52\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         SB        YS 17.9809515\n2         NT        OR 14.9389157\n3         NV        OR 14.1748976\n4         AM        BS 10.9059058\n5         BS        NV  7.6524662\n6         DT        BM  7.6284027\n7         BS        OR  6.5732211\n8         MU        DT  6.5110928\n9         OR        DT  6.3631264\n10        YS        BS  5.3840125\n11        TP        OR  4.6741084\n12        NV        NT  4.5787345\n13        YS        AM  4.2788372\n14        TP        NV  3.9576175\n15        YS        OR  3.3636364\n16        OR        MU  3.2098482\n17        SB        BS  3.1661442\n18        YS        NV  2.9357367\n19        NV        MU  2.3715720\n20        BS        TP  2.3348854\n21        AM        NV  2.2664577\n22        AM        OR  2.0909091\n23        OR        BM  2.0229314\n24        BS        MU  1.5770416\n25        NT        MU  1.5444142\n26        MU        BM  1.4118396\n27        YS        MU  1.4090909\n28        YS        TP  1.2931034\n29        AM        MU  1.0909091\n30        NV        BM  1.0889000\n31        NV        DT  0.9871697\n32        BS        NT  0.9653313\n33        SB        OR  0.9545455\n34        TP        MU  0.9075501\n35        NT        BM  0.8942427\n36        SB        AM  0.8652038\n37        TP        BM  0.8344283\n38        BS        DT  0.7770966\n39        SB        BM  0.7727273\n40        NT        DT  0.7642527\n41        YS        BM  0.7272727\n42        AM        TP  0.7053292\n43        TP        NT  0.6699143\n44        SB        TP  0.6003135\n45        SB        NV  0.5031348\n46        AM        DT  0.4545455\n47        YS        NT  0.4545455\n48        YS        DT  0.4090909\n49        SB        NT  0.3636364\n50        BS        BM  0.3197187\n51        SB        DT  0.3181818\n52        AM        BM  0.2272727\n53        AM        NT  0.2272727\n54        SB        MU  0.1363636\n55        TP        DT  0.1202809\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM          19.6  \n 2 YS        YS          15.4  \n 3 SB        SB           6.67 \n 4 BS        BS           3.89 \n 5 NV        NV           2.70 \n 6 OR        OR           2.17 \n 7 MU        MU           1.47 \n 8 AM        AM           1.22 \n 9 DT        DT           1.13 \n10 TP        TP           0.397\n11 NT        NT           0.122\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_12.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         AM        BS 21.0200907\n2         SB        YS 16.2956036\n3         YS        AM 12.2789541\n4         YS        BS  8.7557604\n5         BS        OR  5.0818342\n6         BS        NV  4.7899094\n7         BS        TP  3.7610780\n8         YS        OR  3.3809524\n9         SB        BS  2.7050691\n10        YS        NV  2.5637481\n11        AM        OR  2.2380952\n12        SB        OR  1.7142857\n13        AM        NV  1.6513057\n14        SB        AM  1.6175115\n15        AM        MU  1.5714286\n16        YS        TP  1.4976959\n17        YS        MU  1.4285714\n18        BS        DT  1.2286029\n19        YS        BM  1.1428571\n20        BS        MU  1.1355311\n21        SB        BM  1.0476190\n22        BS        BM  0.9717770\n23        AM        DT  0.9047619\n24        SB        TP  0.8586790\n25        AM        TP  0.6682028\n26        YS        DT  0.6666667\n27        BS        NT  0.6490842\n28        SB        MU  0.6190476\n29        SB        NV  0.4685100\n30        AM        NT  0.4285714\n31        SB        NT  0.4285714\n32        SB        DT  0.3333333\n33        YS        NT  0.3333333\n34        AM        BM  0.2380952\n35        DT        BM  0.0000000\n36        MU        BM  0.0000000\n37        MU        DT  0.0000000\n38        NT        BM  0.0000000\n39        NT        DT  0.0000000\n40        NT        MU  0.0000000\n41        NT        OR  0.0000000\n42        NV        BM  0.0000000\n43        NV        DT  0.0000000\n44        NV        MU  0.0000000\n45        NV        NT  0.0000000\n46        NV        OR  0.0000000\n47        OR        BM  0.0000000\n48        OR        DT  0.0000000\n49        OR        MU  0.0000000\n50        TP        BM  0.0000000\n51        TP        DT  0.0000000\n52        TP        MU  0.0000000\n53        TP        NT  0.0000000\n54        TP        NV  0.0000000\n55        TP        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           51.6 \n 2 SB        SB           11.1 \n 3 BS        BS            8.16\n 4 AM        AM            6.96\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_12.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         NT        OR 24.85549247\n2         SB        YS 13.90229578\n3         NV        OR 13.28310736\n4         AM        BS 10.91327757\n5         DT        BM  8.90601900\n6         YS        BS  7.19435737\n7         OR        DT  7.01158812\n8         MU        DT  6.24309310\n9         BS        OR  5.93354205\n10        OR        MU  4.68234172\n11        NV        NT  4.48868463\n12        BS        NV  3.94236101\n13        YS        AM  3.59061125\n14        TP        OR  3.51598654\n15        TP        NV  3.24403400\n16        NV        MU  3.16478835\n17        OR        BM  3.14465229\n18        MU        BM  2.83015368\n19        AM        OR  2.77272727\n20        YS        OR  2.72727273\n21        BS        TP  2.52009477\n22        YS        BM  2.13636364\n23        YS        NV  2.09717868\n24        SB        BM  2.09090909\n25        SB        BS  1.93103448\n26        SB        AM  1.66457680\n27        YS        MU  1.45454545\n28        BS        MU  1.35901387\n29        SB        TP  1.32131661\n30        YS        TP  1.31661442\n31        NV        DT  1.27386426\n32        SB        OR  1.27272727\n33        AM        NV  1.21473354\n34        NV        BM  1.19540213\n35        NT        MU  1.17444833\n36        SB        NV  1.09874608\n37        AM        MU  1.04545455\n38        TP        MU  0.93143297\n39        BS        NT  0.83590139\n40        YS        NT  0.72727273\n41        BS        DT  0.67925375\n42        TP        NT  0.67192273\n43        NT        BM  0.63557886\n44        AM        DT  0.59090909\n45        SB        MU  0.59090909\n46        TP        BM  0.49677156\n47        NT        DT  0.49460709\n48        AM        NT  0.45454545\n49        BS        BM  0.34042337\n50        AM        TP  0.28213166\n51        SB        DT  0.27272727\n52        TP        DT  0.24056183\n53        YS        DT  0.18181818\n54        AM        BM  0.09090909\n55        SB        NT  0.09090909\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM         18.2   \n 2 YS        YS         17.8   \n 3 SB        SB          9.77  \n 4 BS        BS          4.13  \n 5 DT        DT          3.27  \n 6 OR        OR          2.79  \n 7 AM        AM          2.24  \n 8 NV        NV          2.16  \n 9 MU        MU          1.59  \n10 TP        TP          0.405 \n11 NT        NT          0.0976\n\n\n\n\n\n\n\n\n\ngen_od_timing2 &lt;- function(input_OD, sf_bs){\n  sf &lt;- od_to_sf(input_OD, sf_bs)\n  \n  return (sf)\n}\ntmap_plot_route &lt;- function(BS, OD) {\n  tmap_mode(\"view\")\n  tm_shape(BS) +\n    tm_dots(col = \"magenta\", scale = 2) +\n  #tm_shape(sf_BS_167_DIR_2) +\n  #  tm_dots(col = \"blue\", scale = 2) +\n  tm_shape(OD) + \n    tm_lines(col = \"TOTAL_TRIPS\", style=\"fixed\", breaks = c(0, 1, 5, 10, 15, 25, 40, 60, 80, 100), lwd = \"TOTAL_TRIPS\", scale=15, palette=\"viridis\") \n} \n\nplot_trip_summary &lt;- function(OD){ \n  summary(OD$TOTAL_TRIPS) \n  p &lt;- ggplot(OD, aes(x=TOTAL_TRIPS)) + geom_histogram(binwidth=25) + xlim(0, 500) + ylim(0, 50)\n  ggplotly(p) \n}\n\n\nod_norm &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_8.rds\")\ntemp_bs_data &lt;- BS_167_DIR_1_DF %&gt;% arrange(BS_167_DIR_1_DF$Seq)\n\nbs_flow_norm &lt;- data.frame(ORIGIN_BS = integer(), DESTIN_BS = integer(), TOTAL_TRIPS = double())\n\ncurrent_bs &lt;- temp_bs_data[1,]$BS_Code\ncurrent_flow &lt;- 0\n\nfor (i in 2:nrow(temp_bs_data)){\n  next_bs &lt;- temp_bs_data[i,]$BS_Code\n  \n  # Boarding Pax\n  temp_flow &lt;- sum((od_norm %&gt;% filter(ORIGIN_BS == current_bs))$NORM_TRIPS)\n  \n  if (is.na(temp_flow) == FALSE){\n    current_flow &lt;- current_flow + temp_flow\n  }\n  \n  # Alighting Pax\n  temp_flow &lt;- sum((od_norm %&gt;% filter(DESTIN_BS == current_bs))$NORM_TRIPS)\n  \n  if (is.na(temp_flow) == FALSE){\n    current_flow &lt;- current_flow - temp_flow\n  }\n  \n  bs_flow_norm_temp &lt;- data.frame(ORIGIN_BS = current_bs, DESTIN_BS = next_bs, TOTAL_TRIPS = current_flow)\n  bs_flow_norm[nrow(bs_flow_norm) +1,] &lt;- bs_flow_norm_temp  \n  current_bs &lt;- next_bs\n}\nbs_flow_norm\n\n   ORIGIN_BS DESTIN_BS TOTAL_TRIPS\n1      58009     58151    9.500948\n2      58151     58331    9.863217\n3      58331     58039   36.287934\n4      58039     58029   47.335553\n5      58029     58019   54.096452\n6      58019     57139   55.691207\n7      57139     57129   49.603830\n8      57129     57119   66.936578\n9      57119     57089   75.835138\n10     57089     57079   81.108014\n11     57079     57069   83.762319\n12     57069     57059   83.565107\n13     57059     57049   81.144957\n14     57049     57039   80.247547\n15     57039     57029   84.617757\n16     57029     57019   93.170721\n17     57019     56099   92.768264\n18     56099     56089  100.479717\n19     56089     56079  100.461802\n20     56079     56069  100.421754\n21     56069     56059   96.196801\n22     56059     56049   51.764144\n23     56049     56039   63.578077\n24     56039     56029   69.254491\n25     56029     56019   74.806136\n26     56019     53099   80.380529\n27     53099     53089   79.850883\n28     53089     53079   83.258058\n29     53079     53069   85.616415\n30     53069     53059   87.793696\n31     53059     53049   61.077342\n32     53049     53039   63.058500\n33     53039     53029   64.910006\n34     53029     53019   61.320146\n35     53019     51069   60.757038\n36     51069     51059   61.675243\n37     51059     51049   62.499156\n38     51049     51039   60.222727\n39     51039     51029   60.917687\n40     51029     51019   61.760596\n41     51019     50059   64.765650\n42     50059     50049   69.742622\n43     50049     50037   73.772003\n44     50037     50069   65.784210\n45     50069     40129   80.066044\n46     40129     40189  101.355989\n47     40189     40179   98.880239\n48     40179      9219   99.207401\n49      9219      9047   86.267413\n50      9047      9037   78.329942\n51      9037      8138   76.964359\n52      8138      8057   76.650951\n53      8057      8069   94.106168\n54      8069      4179   95.598935\n55      4179      2049   94.678899\n56      2049      2029   93.023967\n57      2029      3019   91.790829\n58      3019      3059   76.124086\n59      3059      3129   56.511681\n60      3129      3218   34.566237\n61      3218      5631   28.423941\n62      5631      5521   25.343490\n63      5521     10021   27.606474\n64     10021     10041   28.827638\n65     10041     10051   31.053511\n66     10051     10061   29.731031\n67     10061     10071   30.540106\n68     10071     10501   28.196094\n69     10501     10081   28.251659\n70     10081     10009   10.246177\n\n\n\ntmap_plot_route(sf_BS_167_DIR_1, gen_od_timing2(bs_flow_norm, sf_BS_167_DIR_1))\n\n\n\n\n\n\nod_norm &lt;- readRDS(\"data/167_OD_Analysis/sf_2022_08_norm_8.rds\")\ntemp_bs_data &lt;- BS_167_DIR_1_DF %&gt;% arrange(BS_167_DIR_1_DF$Seq)\n\nbs_flow_norm &lt;- data.frame(ORIGIN_BS = integer(), DESTIN_BS = integer(), TOTAL_TRIPS = double())\n\ncurrent_bs &lt;- temp_bs_data[1,]$BS_Code\ncurrent_flow &lt;- 0\n\nfor (i in 2:nrow(temp_bs_data)){\n  next_bs &lt;- temp_bs_data[i,]$BS_Code\n  \n  # Boarding Pax\n  temp_flow &lt;- sum((od_norm %&gt;% filter(ORIGIN_BS == current_bs))$NORM_TRIPS)\n  \n  if (is.na(temp_flow) == FALSE){\n    current_flow &lt;- current_flow + temp_flow\n  }\n  \n  # Alighting Pax\n  temp_flow &lt;- sum((od_norm %&gt;% filter(DESTIN_BS == current_bs))$NORM_TRIPS)\n  \n  if (is.na(temp_flow) == FALSE){\n    current_flow &lt;- current_flow - temp_flow\n  }\n  \n  bs_flow_norm_temp &lt;- data.frame(ORIGIN_BS = current_bs, DESTIN_BS = next_bs, TOTAL_TRIPS = current_flow)\n  bs_flow_norm[nrow(bs_flow_norm) +1,] &lt;- bs_flow_norm_temp  \n  current_bs &lt;- next_bs\n}\nbs_flow_norm\n\n   ORIGIN_BS DESTIN_BS TOTAL_TRIPS\n1      58009     58151    0.000000\n2      58151     58331    0.370632\n3      58331     58039   35.961541\n4      58039     58029   42.552450\n5      58029     58019   45.928612\n6      58019     57139   42.358280\n7      57139     57129   37.010858\n8      57129     57119   34.355141\n9      57119     57089   54.246291\n10     57089     57079   55.280606\n11     57079     57069   54.813015\n12     57069     57059   54.451175\n13     57059     57049   51.013129\n14     57049     57039   50.948759\n15     57039     57029   52.467239\n16     57029     57019   57.732522\n17     57019     56099   56.864001\n18     56099     56089   67.874545\n19     56089     56079   67.874545\n20     56079     56069   67.792461\n21     56069     56059   65.587640\n22     56059     56049   34.463993\n23     56049     56039   42.368519\n24     56039     56029   45.578747\n25     56029     56019   48.466882\n26     56019     53099   50.156250\n27     53099     53089   49.959232\n28     53089     53079   52.261437\n29     53079     53069   54.454077\n30     53069     53059   57.443489\n31     53059     53049   52.503237\n32     53049     53039   53.763319\n33     53039     53029   56.945371\n34     53029     53019   52.720287\n35     53019     51069   52.268685\n36     51069     51059   51.937465\n37     51059     51049   52.708777\n38     51049     51039   50.896768\n39     51039     51029   50.093635\n40     51029     51019   48.672663\n41     51019     50059   51.659642\n42     50059     50049   50.952868\n43     50049     50037   52.173153\n44     50037     50069   45.582504\n45     50069     40129   54.578685\n46     40129     40189   68.330523\n47     40189     40179   66.643827\n48     40179      9219   66.195776\n49      9219      9047   44.025566\n50      9047      9037   44.025566\n51      9037      8138   44.025566\n52      8138      8057   44.025566\n53      8057      8069   60.185733\n54      8069      4179   59.479678\n55      4179      2049   58.473773\n56      2049      2029   56.116295\n57      2029      3019   54.879382\n58      3019      3059   46.204501\n59      3059      3129   46.204501\n60      3129      3218   46.204501\n61      3218      5631   47.931546\n62      5631      5521   46.912613\n63      5521     10021   49.768524\n64     10021     10041   52.683549\n65     10041     10051   55.228638\n66     10051     10061   56.311844\n67     10061     10071   55.932815\n68     10071     10501   54.659104\n69     10501     10081   54.289465\n70     10081     10009   40.333258\n\n\n\ntmap_plot_route(sf_BS_167_DIR_1, gen_od_timing2(bs_flow_norm, sf_BS_167_DIR_1))\n\n\n\n\n\nTodo list:\n\nVisualisation tmap for Subzone / bus stop see how to display data\nEDA on trip - derivation on initial analysis (eg. focus on AM Peak Dir 1?)\n\nSequential trial and error, might be worthwhile to check off peak trends as well - without data cannot determine which user group but maybe can guess?\n\nK-means clustering on types of stops based on temporal data - each stop, pattern based on day type [probably seperate article]"
  },
  {
    "objectID": "explore/data/167_OD_analysis/MPSZ-2019.html",
    "href": "explore/data/167_OD_analysis/MPSZ-2019.html",
    "title": "UrbanCoalesce",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "explore/index.html",
    "href": "explore/index.html",
    "title": "UrbanCoalesce // Explore",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n\n\n\n\n\n\nEffects of Thomson East Coast Line on Bus Service 167\n\n\n\n\n\nAnalysis of Travel Patterns Using OD-Matrix provided by LTA\n\n\n\n\n\nDec 23, 2023\n\n\nTeo Ren Jie\n\n\n36 min\n\n\n\n\n\n\n\n\n\n\n\n\nSample Python Document\n\n\n\n\n\nThis is a document to test python\n\n\n\n\n\nNov 26, 2023\n\n\nTeo Ren Jie\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "explore/sample_doc.html",
    "href": "explore/sample_doc.html",
    "title": "Sample Python Document",
    "section": "",
    "text": "reticulate::repl_python()\n\nexit\n\n\n\na = 1 + 3\n\n\n\n\n\nprint(a)\n\n4"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teo Ren Jie",
    "section": "",
    "text": "About Me\n\n\nI am Ren Jie, a Year 3 Information Systems undergraduate at the Singapore Management University, majoring in Digitalisation & Cloud Solutions and Urban Science. I also hold a Diploma in Architecture from Singapore Polytechnic, having a good understanding of the planning, design, policy and regulatory aspects of the built environment.\nMy main interest is in urban science research, focusing in areas of sustainability and transport flows. I have summarised it in three key pointers:\n\nUnderstanding data generated by urban cities\nAnalysing and drawing conclusions from data\nComing up with actionable solutions against urban issues\n\nI believe that these skills will allow gaps in the current urban planning and design ecosystem be filled, closing the loop between the planner and the data scientist, allowing more insights to be effectively derived through a clearer understanding of both ends of the spectrum.\nMy Urban Science second major is an encapsulates my academic journey and interests in the analysis, exploitation and application of data in the context of the city and built environment.\n\n\n\nMore About This Site\n\n\n\n\n\n\n\nWarning\n\n\n\nThis site is still a work in progress!\n\n\n\n\n\n\n\nKey Information\n\n\nProjects and HighlightsEducationExperience\n\n\n\nxx\n\n\n\nBSc Information Systems - Singapore Management University (2021 - 2025)\n\nFirst Major in Digitalisation and Cloud Solutions and Business Analytics\nSecond Major in Urban Science\n\nUrban Planning, Design, Geospatial Analytics, Data Science\n\n\nExchange Programme - University of Leeds (2024)\n\nGeography and Transport Studies\n\nUrban Transformation, Transport Policy, Transport and Social Psychology\n\n\nDip Architecture - Singapore Polytechnic (2016 - 2019)\n\nArchitecture\n\nBuilt Environment, Architecture, Sustainability\n\n\n\n\nData Science Intern - Urban Redevelopment Authority of Singapore (May 2023 - July 2023)\nNational Service - Republic of Singapore Air Force (May 2019 - May 2021)\nTechnical Assistant - Land Transport Authority Singapore (May 2022 - Aug 2022, Apr 2019 - May 2019)\nProject Management Intern - Land Transport Authority Singapore (Mar 2018 - Jun 2018)\n\n\n\n\n\n\n\nFind Me\n\nConnect with me on LinkedIn or contact me through email!"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Nothing here for now!\n\n\n\n\n\n\nWarning\n\n\n\nThis site is still a work in progress!"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "UrbanCoalesce",
    "section": "",
    "text": "UrbanCoalesce\nThis repository contains the Quarto and assets for the renjieteo.comwebsite"
  },
  {
    "objectID": "explore/fyp_preprocessing.html",
    "href": "explore/fyp_preprocessing.html",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "",
    "text": "To evaluate which data source is most complete and suitable\n\nOSM\ndata.gov.sg\n\nTo prepare the data sources for machine learning\n\nCombination of data sources, fields and manual intervention"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#background",
    "href": "explore/fyp_preprocessing.html#background",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "",
    "text": "XX"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#setting-up",
    "href": "explore/fyp_preprocessing.html#setting-up",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "2.1 Setting Up",
    "text": "2.1 Setting Up\nPackages required to be loaded for\n\npacman::p_load(dplyr, readr, sf, tidyverse, tmap, sfdep, ggplot2, plotly, spdep, rjson, osmextract, geojsonR, rvest, httr, jsonlite)"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#data-sources",
    "href": "explore/fyp_preprocessing.html#data-sources",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "2.2 Data Sources",
    "text": "2.2 Data Sources\n\n\n\nDataset Name\nSource\nMethodology\n\n\n\n\nHDB Existing Buildings\nData.gov.sg\nDownload\n\n\nHDB Property Information (4 Aug 2024)\nData.gov.sg\nDownload\n\n\nURA Master Plan 2019 Land Use (3 Jul 2023)\nData.gov.sg\nDownload\n\n\nHumanitarian OSM Team Buildings Dataset (1 July 2024)\nHOTOSM\nDownload"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#loading-data",
    "href": "explore/fyp_preprocessing.html#loading-data",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "4.1 Loading Data",
    "text": "4.1 Loading Data\nLoading HDB Property Information (4 Aug 2024)\n\nRAW_HDB_PROPERTY &lt;- read.csv(\"data/fyp_preprocessing/HDBPropertyInformation.csv\")\n\nLoading HDB Existing Buildings KML\nhttps://stackoverflow.com/questions/50775357/how-to-read-in-kml-file-properly-in-r-or-separate-out-lumped-variables-into-col\n\nraw_hdb_bldgs = st_read(\"data/fyp_preprocessing/HDBExistingBuilding.geojson\")\n\nReading layer `HDBExistingBuilding' from data source \n  `C:\\Users\\renji\\OneDrive - Singapore Management University\\0_git-projects\\urbancoalesce\\explore\\data\\fyp_preprocessing\\HDBExistingBuilding.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 12847 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6848 ymin: 1.270005 xmax: 103.989 ymax: 1.457245\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nattributes &lt;- lapply(X = 1:nrow(raw_hdb_bldgs), \n                     FUN = function(x) {\n\n                       raw_hdb_bldgs %&gt;% \n                         slice(x) %&gt;%\n                         pull(Description) %&gt;%\n                         read_html() %&gt;%\n                         html_node(\"table\") %&gt;%\n                         html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %&gt;%\n                         as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %&gt;% \n                         pivot_wider(names_from = Attribute, values_from = Value)\n\n                     })\n\nhdb_bldgs &lt;- \n  raw_hdb_bldgs %&gt;%\n  bind_cols(bind_rows(attributes)) %&gt;%\n  select(-Description)\nhdb_bldgs &lt;- st_zm(hdb_bldgs)\nhdb_bldgs &lt;- st_transform(hdb_bldgs, crs = 3414)\n\nLoading Humanitarian OSM Buildings Dataset (1 July 2024)\n\nosm_bldgs &lt;- st_read(\"data/fyp_preprocessing/QUICKOSM_BLDGS_20240818_QGIS/osmbldgs_20240818.gpkg\")\n\nReading layer `building_singapore' from data source \n  `C:\\Users\\renji\\OneDrive - Singapore Management University\\0_git-projects\\urbancoalesce\\explore\\data\\fyp_preprocessing\\QUICKOSM_BLDGS_20240818_QGIS\\osmbldgs_20240818.gpkg' \n  using driver `GPKG'\nSimple feature collection with 121717 features and 477 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6059 ymin: 1.159946 xmax: 104.4063 ymax: 1.470583\nGeodetic CRS:  WGS 84\n\nosm_bldgs &lt;- osm_bldgs %&gt;%\n  st_transform(crs = 3414)\n\nTO-DO: EXTRACT HOTOSM DATA BASED ON MP19 LAND USE POLYGON = RESIDENTIAL (CAN SELECT HDB ONLY?)\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(osm_bldgs) +\n  tm_fill(col = \"building\")\n\n\n\n\n\n\n\n\n\nunique(osm_bldgs[['building']])\n\n [1] \"yes\"                         \"garage\"                     \n [3] \"commercial\"                  \"school\"                     \n [5] \"industrial\"                  \"warehouse\"                  \n [7] \"residential\"                 \"retail\"                     \n [9] \"hotel\"                       \"church\"                     \n[11] \"college\"                     \"hospital\"                   \n[13] \"office\"                      \"civic\"                      \n[15] \"public\"                      \"roof\"                       \n[17] \"apartments\"                  \"education\"                  \n[19] \"parking\"                     \"kindergarten\"               \n[21] \"university\"                  \"dormitory\"                  \n[23] \"stable\"                      \"house\"                      \n[25] \"detached\"                    \"yes;industrial\"             \n[27] \"construction\"                \"government\"                 \n[29] \"temple\"                      \"bridge\"                     \n[31] \"public;roof\"                 \"commercial;yes\"             \n[33] \"train_station\"               \"transportation\"             \n[35] \"service\"                     \"religious\"                  \n[37] NA                            \"greenhouse\"                 \n[39] \"hut\"                         \"mosque\"                     \n[41] \"hangar\"                      \"sports_centre\"              \n[43] \"grandstand\"                  \"waste_transfer_station\"     \n[45] \"manufacture\"                 \"boathouse\"                  \n[47] \"clinic\"                      \"terrace\"                    \n[49] \"semidetached_house\"          \"chapel\"                     \n[51] \"toilets\"                     \"ruins\"                      \n[53] \"storage_tank\"                \"fire_station\"               \n[55] \"synagogue\"                   \"swimming_pool_changing_room\"\n[57] \"stadium\"                     \"mix_used\"                   \n[59] \"shop\"                        \"guardhouse\"                 \n[61] \"shed\"                        \"gazebo\"                     \n[63] \"shrine\"                      \"CET_Campus_East\"            \n[65] \"wayside_shrine\"              \"EiS_Residences\"             \n[67] \"medical\"                     \"IMM\"                        \n[69] \"farm_auxiliary\"              \"bungalow\"                   \n[71] \"sports_hall\"                 \"hall\"                       \n[73] \"carport\"                     \"monastery\"                  \n[75] \"utility\"                     \"multi-purpose_stage\"        \n[77] \"no\"                          \"security\"                   \n[79] \"pavilion\"                    \"gateway\"                    \n[81] \"seasonal\"                    \"pagoda\"                     \n[83] \"switchroom\"                  \"garages\"                    \n[85] \"yes;retail\"                  \"Security_Post\"              \n[87] \"supermarket\"                 \"jtc_nanospace\"              \n[89] \"gatehouse\"                   \"multi-purpose_hall\"         \n[91] \"tent\"                        \"shelter\"                    \n[93] \"tourism\"                     \"2\"                          \n[95] \"kiosk\"                       \"bunker\"                     \n[97] \"healthcare\"                 \n\n\nKey focus\n\nresidential\nmix_used\nyes\n2?\napartments\nhouse\n\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"yes\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\nDrop mix_used\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"mix_used\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"yes\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\nDrop 2 - facility in boon lay\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"2\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\nKeep - how to manage the HDB and condo and split them out?\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"apartments\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\n\ntemp &lt;- osm_bldgs %&gt;% filter(building == \"house\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(temp) +\n  tm_fill(col = \"building\")\n\nEDA Summary\nRetain following fields:\n\nresidential - some overlap with condo\nyes - overlap with many other non residential\napartments - overlap with condo\n\n\nproc_osm_bldgs &lt;- osm_bldgs %&gt;% filter(building %in% c(\"residential\", \"yes\", \"apartments\"))\nproc_osm_bldgs &lt;- proc_osm_bldgs %&gt;% filter(is.na(addr.street) == FALSE)\nproc_osm_bldgs &lt;- proc_osm_bldgs %&gt;%\n  mutate(proc_osm_bldgs, address = ifelse(is.na(addr.housenumber) == FALSE, paste(addr.housenumber, addr.street),addr.street))\n\nMoving forward: combine with HDB data, check and drop remainder with no match with HDB dataset\n\naddr_lst &lt;- sort(unique(proc_osm_bldgs$address))\npostal &lt;- get_postal(addr_lst)\n\nwrite_rds(postal, \"data/fyp_preprocessing/osm_bldgs_postal.rds\")\n\n\nOSM_BLDGS_POSTAL &lt;- read_rds(\"data/fyp_preprocessing/osm_bldgs_postal.rds\")\ntemp_osm &lt;- left_join(proc_osm_bldgs, OSM_BLDGS_POSTAL, by=c(\"address\" = \"address\"))\n\n\ntemp_view &lt;- temp_osm %&gt;% filter(postal == \"NIL\")\nunique(temp_view$address)\n\n  [1] \"Outram Road\"                        \"Seah Street\"                       \n  [3] \"Kim Seng Road\"                      \"Jalan Haji Alias\"                  \n  [5] \"Coronation Road West\"               \"Kaki Bukit Avenue 1\"               \n  [7] \"Sin Ming Drive\"                     \"Tampines North Drive 2\"            \n  [9] \"Tampines Road\"                      \"710A Ang Mo Kio Central 1\"         \n [11] \"714 Ang Mo Kio Central 1\"           \"Changi Village Road\"               \n [13] \"419 Bedok North Avenue 1\"           \"420 Bedok North Avenue 1\"          \n [15] \"Simei Street 6\"                     \"Heng Mui Keng Terrace\"             \n [17] \"Jalan Pekan Ubin\"                   \"Jalan Batu Ubin\"                   \n [19] \"Woodlands Square\"                   \"Simei Street 4\"                    \n [21] \"Ang Mo Kio Industrial Park 2A\"      \"980 Buangkok Green\"                \n [23] \"Riverside Road\"                     \"Joo Koon Circle\"                   \n [25] \"10 Tuas Avenue 10\"                  \"15 Tuas Street\"                    \n [27] \"13 Tuas Avenue 13\"                  \"Tuas Avenue 11\"                    \n [29] \"11 Tuas Avenue 11\"                  \"Gul Street 2\"                      \n [31] \"Yuk Tong Avenue\"                    \"Defu Lane 4\"                       \n [33] \"Defu Lane 3\"                        \"Joo Koon Way\"                      \n [35] \"Joo Koon Road\"                      \"Pandan Road\"                       \n [37] \"Bukit Batok West Avenue 5\"          \"Kallang Way\"                       \n [39] \"Fusionopolis Walk\"                  \"Loyang Avenue\"                     \n [41] \"Senoko Drive\"                       \"Telok Ayer Street\"                 \n [43] \"Farrer Road\"                        \"Purvis Street\"                     \n [45] \"2 Seragoon North Avenue 2\"          \"Coral Island\"                      \n [47] \"Ocean Drive\"                        \"Sandy Island\"                      \n [49] \"163 Bukit Batok West Avenue 8\"      \"162 Bukit Batok West Avenue 8\"     \n [51] \"155 Bukit Batok West Avenue 8\"      \"Bukit Batok East Avenue 6\"         \n [53] \"12 Artillery Avenue\"                \"Bukit Batok Street 31\"             \n [55] \"Margaret Drive\"                     \"91 Hougang Avenue 3\"               \n [57] \"85 Hougang Avenue 3\"                \"Defu Lane 1\"                       \n [59] \"Gambas Avenue\"                      \"Senoko Crescent\"                   \n [61] \"Maxwell Road\"                       \"Macalister Road\"                   \n [63] \"114 Bukit Purmei Avenue\"            \"Central Expressway\"                \n [65] \"113 Bukit Purmei Avenue\"            \"110 Bukit Purmei Avenue\"           \n [67] \"115 Bukit Purmei Avenue\"            \"112 Bukit Purmei Avenue\"           \n [69] \"111 Bukit Purmei Avenue\"            \"Delta Road\"                        \n [71] \"Peng Nguan Street\"                  \"103 Henderson Road\"                \n [73] \"44A Beo Crescent\"                   \"Ganges Avenue\"                     \n [75] \"Clarence Lane\"                      \"Penang Road\"                       \n [77] \"Moulmein Road\"                      \"Bencoolen Street\"                  \n [79] \"215 Airport Road\"                   \"Queensway\"                         \n [81] \"201 Commonwealth Avenue West\"       \"Yishun Ave 6\"                      \n [83] \"Cavenagh Road\"                      \"Defu Avenue 1\"                     \n [85] \"50 Clive Road\"                      \"Hoot Kiam Road\"                    \n [87] \"Paterson Road\"                      \"Wilkie Road\"                       \n [89] \"Joo Chiat Road\"                     \"Jalan Sultan\"                      \n [91] \"18 Baboo Lane\"                      \"Kelantan Road\"                     \n [93] \"Mount Faber Road\"                   \"Fernvale Road\"                     \n [95] \"Suffolk Road\"                       \"33 Chai Chee Road\"                 \n [97] \"34 Chai Chee Road\"                  \"35 Chai Chee Road\"                 \n [99] \"36 Chai Chee Road\"                  \"37 Chai Chee Road\"                 \n[101] \"40 Chai Chee Road\"                  \"305D Punggol Road\"                 \n[103] \"Chapel Road\"                        \"Draycott Drive\"                    \n[105] \"215 Choa Chu Kang Central\"          \"216 Choa Chu Kang Central\"         \n[107] \"Choa Chu Kang North 5\"              \"Ubi Road 3\"                        \n[109] \"Race Course Lane\"                   \"Jansen Road\"                       \n[111] \"Kovan Road\"                         \"Highland Road\"                     \n[113] \"Tuas View Crescent\"                 \"Cove Drive\"                        \n[115] \"Grange Road\"                        \"Emerald Hill Road\"                 \n[117] \"Mandalay Road\"                      \"Bedok Reservoir Road\"              \n[119] \"Hougang Street 11\"                  \"Joo Chiat Place\"                   \n[121] \"Braddell Road\"                      \"Mackerrow Road\"                    \n[123] \"3188 Geylang Bahru\"                 \"192C Punggol Road\"                 \n[125] \"Oxford Road\"                        \"Pandan Gardens\"                    \n[127] \"Changi Road\"                        \"Everitt Road\"                      \n[129] \"Sembawang Road\"                     \"Bedok Road\"                        \n[131] \"Jalan Chempaka Kuning\"              \"Koon Seng Road\"                    \n[133] \"Bukit Timah Road\"                   \"Changi South Avenue 1\"             \n[135] \"Siglap Road\"                        \"Ceylon Road\"                       \n[137] \"Turnhouse Road\"                     \"Netheravon Road\"                   \n[139] \"Lorong Marzuki\"                     \"Alexandra Road\"                    \n[141] \"85 Bedok North Avenue 4\"            \"Toh Tuck Link\"                     \n[143] \"Saint Martin's Drive\"               \"Chander Road\"                      \n[145] \"13 Jalan Sentosa\"                   \"32 Chai Chee Road\"                 \n[147] \"73N Jalan Senang\"                   \"91L Jalan Senang\"                  \n[149] \"Pioneer Walk\"                       \"Pioneer Turn\"                      \n[151] \"Guillemard Lane\"                    \"Aljunied Road\"                     \n[153] \"Lorong 24 Geylang\"                  \"28 Lorong 28 Geylang\"              \n[155] \"Lorong 28 Geylang\"                  \"Lorong 30 Geylang\"                 \n[157] \"34 Lorong 34 Geylang\"               \"Lorong 34 Geylang\"                 \n[159] \"Serangoon Road\"                     \"89 Bedok North Avenue 4\"           \n[161] \"87 Bedok North Avenue 4\"            \"88 Bedok North Avenue 4\"           \n[163] \"Kampong Bahru Road\"                 \"440C Clementi Close\"               \n[165] \"293D Bukit Batok East Avenue 6\"     \"460A Bukit Batok West Avenue 8\"    \n[167] \"460B Bukit Batok West Avenue 8\"     \"463B Bukit Batok West Avenue 8\"    \n[169] \"Boscombe Road\"                      \"Parkstone Road\"                    \n[171] \"224-J Jalan Endut Senin\"            \"Jalan Endut Senin\"                 \n[173] \"84 Bedok North Avenue 4\"            \"86 Bedok North Avenue 4\"           \n[175] \"90 Bedok North Avenue 4\"            \"91 Bedok North Avenue 4\"           \n[177] \"Chai Chee Road\"                     \"Bendemeer Road\"                    \n[179] \"Cavan Road\"                         \"Hamilton Road\"                     \n[181] \"Syed Alwi Road\"                     \"1003 Bukit Teresa Road\"            \n[183] \"Jalan Bukit Ho Swee\"                \"Hawk Arena\"                        \n[185] \"439 Clementi Close\"                 \"Segar Road\"                        \n[187] \"Woodgrove View\"                     \"Bloxhome Drive\"                    \n[189] \"Duchess Road\"                       \"Serangoon Garden Way\"              \n[191] \"Palm Grove Avenue\"                  \"Jalan Ampang\"                      \n[193] \"Glasgow Road\"                       \"Sandilands Road\"                   \n[195] \"Sin Ming Road\"                      \"Charlton Lane\"                     \n[197] \"Lorong Kilat\"                       \"Joo Chiat Avenue\"                  \n[199] \"Ulu Pandan Park Connector\"          \"Chiap Guan Avenue\"                 \n[201] \"Joo Chiat Walk\"                     \"107\"                               \n[203] \"Puay Hee Avenue\"                    \"Choa Chu Kang Road\"                \n[205] \"Galistan Avenue\"                    \"19 Harding Road\"                   \n[207] \"Parry Avenue\"                       \"Swiss Club Avenue\"                 \n[209] \"Dunearn Road\"                       \"Poh Huat Road\"                     \n[211] \"20 Peirce Road\"                     \"Faber Drive\"                       \n[213] \"Lorong 6 Realty Park\"               \"Lichi Avenue\"                      \n[215] \"Woodgrove Drive\"                    \"Jalan Usaha\"                       \n[217] \"Sungei Kadut Avenue\"                \"Upper Paya Lebar Road\"             \n[219] \"Paya Lebar Crescent\"                \"Lorong Ong Lye\"                    \n[221] \"East Coast Avenue\"                  \"Tai Hwan Heights\"                  \n[223] \"Lothian Terrace\"                    \"16 The Oval Seletar Aerospace Park\"\n[225] \"5A Bays Water Road\"                 \"Bodmin Drive\"                      \n[227] \"Carisbrooke Grove\"                  \"Burghley Drive\"                    \n[229] \"Chuan Walk\"                         \"Figaro Street\"                     \n[231] \"Palm Drive\"                         \"Chaun Drive\"                       \n[233] \"Elite Terrace\"                      \"Canberra Road\"                     \n[235] \"Tuas Road\"                          \"Tagore Drive\"                      \n[237] \"Tagore Industrial Avenue\"           \"Tagore Lane\"                       \n[239] \"Mulberry Avenue\"                    \"Pasir Ris View\"                    \n[241] \"Riverina Crescent\"                  \"Jalan Pelatina\"                    \n[243] \"Cactus Road\"                        \"Siglap Bank\"                       \n[245] \"Burnfoot Terrace\"                   \"Thomson Green\"                     \n[247] \"Harvey Avenue\"                      \"Sommerville Road\"                  \n[249] \"Jalan Ria\"                          \"Jalan Riang\"                       \n[251] \"Jalan Ishak\"                        \"Lorong Marican\"                    \n[253] \"Lorong Biawak\"                      \"Flora Road\"                        \n[255] \"Kaki Bukit Road 3\"                  \"Simei Rise\"                        \n[257] \"Beatty Road\"                        \"Lorong 19 Geylang\"                 \n[259] \"11 Lorong 11 Geylang\"               \"Lorong 14 Geylang\"                 \n[261] \"Cardiff Grove\"                      \"Conway Circle\"                     \n[263] \"Jalan Limbok\"                       \"Lentor Street\"                     \n[265] \"Lentor Link\"                        \"Lentor Green\"                      \n[267] \"Bedok South Avenue 1\"               \"Lim Ah Pin Road\"                   \n[269] \"Tampines Street 83\"                 \"18 Spottiswoode\"                   \n[271] \"Loyang Way\"                         \"Changi Business Park Vista\"        \n[273] \"Bowmont Gardens\"                    \"Lorong 22 Geylang\"                 \n[275] \"Paya Lebar Road\"                    \"Lynwood Grove\"                     \n[277] \"Simon Road\"                         \"Loewen Road\"                       \n[279] \"Tuas South Avenue 3\"                \"Yishun Avenue 4\"                   \n[281] \"Coronation Road\"                    \"Imbiah Road\"                       \n[283] \"China Street\"                       \"Sixth Lok Yang Road\"               \n[285] \"Woodlands Road\"                     \"River Valley Road\"                 \n[287] \"Choa Chu Kang Drive\"                \"Jurong East Street 32\"             \n[289] \"Ang Mo Kio Central 3\"               \"Bishan Street 23\"                  \n[291] \"Faber Walk\"                         \"Yishun Street 23\"                  \n[293] \"Benoi Sector\"                       \"Benoi Road\"                        \n[295] \"Pheng Geck Avenue\"                  \"Tong Watt Road\"                    \n[297] \"Sea Avenue\"                         \"Ang Mo Kio Avenue 1\"               \n[299] \"West Coast Way\"                     \"28A West Jalan Lempeng\"            \n[301] \"28A East Jalan Lempeng\"             \"13 Clementi Crescent\"              \n[303] \"1007 Bukit Teresa Road\"             \"1005 Bukit Teresa Road\"            \n[305] \"York Place\"                         \"Bishan Street 15\"                  \n[307] \"Bulim Avenue\"                       \"Khiang Guan Avenue\"                \n[309] \"Straits View\"                       \"13 Leo Drive\"                      \n[311] \"Kinta Road\"                         \"468I Upper Changi Road\"            \n[313] \"Cove Grove\"                         \"Riviera Drive\"                     \n[315] \"Bedok Rise\"                         \"Tampines Street 61\"                \n[317] \"Keppel Bay View\"                    \"20 Hindhede Place\"                 \n[319] \"Tampines Street 64\"                 \"Canberra Drive\"                    \n[321] \"Dakota Crescent\"                    \"Clementi West Street 2\"            \n[323] \"56E Marne Road\"                     \"Mount Vernon Road\"                 \n[325] \"Marsiling Road\"                     \"Chong Kuo Road\"                    \n[327] \"Pemimpin Place\"                     \"Pemimpin Terrace\"                  \n[329] \"15 Lorong 15 Geylang\"               \"Poh Huat Drive\"                    \n[331] \"Sunrise Terrace\"                    \"Jalan Isnin\"                       \n[333] \"Jalan Minggu\"                      \n\n\n\ntemp_view &lt;- temp_osm %&gt;% filter(postal == \"NIL\")\ntemp_view &lt;- temp_view %&gt;% filter(as.numeric(substr(address, 1, 2)) &gt;= 0)\nunique(temp_view$address)\n\n [1] \"710A Ang Mo Kio Central 1\"          \"714 Ang Mo Kio Central 1\"          \n [3] \"419 Bedok North Avenue 1\"           \"420 Bedok North Avenue 1\"          \n [5] \"980 Buangkok Green\"                 \"10 Tuas Avenue 10\"                 \n [7] \"15 Tuas Street\"                     \"13 Tuas Avenue 13\"                 \n [9] \"11 Tuas Avenue 11\"                  \"2 Seragoon North Avenue 2\"         \n[11] \"163 Bukit Batok West Avenue 8\"      \"162 Bukit Batok West Avenue 8\"     \n[13] \"155 Bukit Batok West Avenue 8\"      \"12 Artillery Avenue\"               \n[15] \"91 Hougang Avenue 3\"                \"85 Hougang Avenue 3\"               \n[17] \"114 Bukit Purmei Avenue\"            \"113 Bukit Purmei Avenue\"           \n[19] \"110 Bukit Purmei Avenue\"            \"115 Bukit Purmei Avenue\"           \n[21] \"112 Bukit Purmei Avenue\"            \"111 Bukit Purmei Avenue\"           \n[23] \"103 Henderson Road\"                 \"44A Beo Crescent\"                  \n[25] \"215 Airport Road\"                   \"201 Commonwealth Avenue West\"      \n[27] \"50 Clive Road\"                      \"18 Baboo Lane\"                     \n[29] \"33 Chai Chee Road\"                  \"34 Chai Chee Road\"                 \n[31] \"35 Chai Chee Road\"                  \"36 Chai Chee Road\"                 \n[33] \"37 Chai Chee Road\"                  \"40 Chai Chee Road\"                 \n[35] \"305D Punggol Road\"                  \"215 Choa Chu Kang Central\"         \n[37] \"216 Choa Chu Kang Central\"          \"3188 Geylang Bahru\"                \n[39] \"192C Punggol Road\"                  \"85 Bedok North Avenue 4\"           \n[41] \"13 Jalan Sentosa\"                   \"32 Chai Chee Road\"                 \n[43] \"73N Jalan Senang\"                   \"91L Jalan Senang\"                  \n[45] \"28 Lorong 28 Geylang\"               \"34 Lorong 34 Geylang\"              \n[47] \"89 Bedok North Avenue 4\"            \"87 Bedok North Avenue 4\"           \n[49] \"88 Bedok North Avenue 4\"            \"440C Clementi Close\"               \n[51] \"293D Bukit Batok East Avenue 6\"     \"460A Bukit Batok West Avenue 8\"    \n[53] \"460B Bukit Batok West Avenue 8\"     \"463B Bukit Batok West Avenue 8\"    \n[55] \"224-J Jalan Endut Senin\"            \"84 Bedok North Avenue 4\"           \n[57] \"86 Bedok North Avenue 4\"            \"90 Bedok North Avenue 4\"           \n[59] \"91 Bedok North Avenue 4\"            \"1003 Bukit Teresa Road\"            \n[61] \"439 Clementi Close\"                 \"107\"                               \n[63] \"19 Harding Road\"                    \"20 Peirce Road\"                    \n[65] \"16 The Oval Seletar Aerospace Park\" \"11 Lorong 11 Geylang\"              \n[67] \"18 Spottiswoode\"                    \"28A West Jalan Lempeng\"            \n[69] \"28A East Jalan Lempeng\"             \"13 Clementi Crescent\"              \n[71] \"1007 Bukit Teresa Road\"             \"1005 Bukit Teresa Road\"            \n[73] \"13 Leo Drive\"                       \"468I Upper Changi Road\"            \n[75] \"20 Hindhede Place\"                  \"56E Marne Road\"                    \n[77] \"15 Lorong 15 Geylang\"              \n\n\nTotal 77\n\ntemp_osm[temp_osm$address == \"88 Bedok North Avenue 4\", \"address\"] = \"88 BEDOK NORTH STREET 4\"\ntemp_osm[temp_osm$address == \"201 Commonwealth Avenue West\", \"address\"] = \"201 CLEMENTI AVENUE 6\"\ntemp_osm[temp_osm$address == \"112 Bukit Purmei Avenue\", \"address\"] = \"112 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"114 Bukit Purmei Avenue\", \"address\"] = \"114 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"35 Chai Chee Road\", \"address\"] = \"35 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"40 Chai Chee Road\", \"address\"] = \"40 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"87 Bedok North Avenue 4\", \"address\"] = \"87 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"34 Chai Chee Road\", \"address\"] = \"34 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"36 Chai Chee Road\", \"address\"] = \"36 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"163 Bukit Batok West Avenue 8\", \"address\"] = \"163 Bukit Batok Street 11\"\ntemp_osm[temp_osm$address == \"115 Bukit Purmei Avenue\", \"address\"] = \"115 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"163 Bukit Batok West Avenue 8\", \"address\"] = \"163 Bukit Batok Street 11\"\ntemp_osm[temp_osm$address == \"44A Beo Crescent\", \"address\"] = \"44A Havelock Rd\"\ntemp_osm[temp_osm$address == \"714 Ang Mo Kio Central 1\", \"address\"] = \"714 Ang Mo Kio Avenue 6\"\ntemp_osm[temp_osm$address == \"163 Bukit Batok West Avenue 8\", \"address\"] = \"163 Bukit Batok Street 11\"\ntemp_osm[temp_osm$address == \"113 Bukit Purmei Avenue\", \"address\"] = \"113 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"162 Bukit Batok West Avenue 8\", \"address\"] = \"162 Bukit Batok Street 11\"\ntemp_osm[temp_osm$address == \"113 Bukit Purmei Avenue\", \"address\"] = \"113 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"103 Henderson Road\", \"address\"] = \"103 Henderson Crescent\"\ntemp_osm[temp_osm$address == \"91 Bedok North Avenue 4\", \"address\"] = \"91 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"460B Bukit Batok West Avenue 8\", \"address\"] = \"460B Bukit Batok West Avenue 9\"\ntemp_osm[temp_osm$address == \"90 Bedok North Avenue 4\", \"address\"] = \"90 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"110 Bukit Purmei Avenue\", \"address\"] = \"110 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"420 Bedok North Avenue 1\", \"address\"] = \"420 Bedok North Street 1\"\ntemp_osm[temp_osm$address == \"419 Bedok North Avenue 1\", \"address\"] = \"419 Bedok North Street 1\"\ntemp_osm[temp_osm$address == \"37 Chai Chee Road\", \"address\"] = \"37 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"33 Chai Chee Road\", \"address\"] = \"33 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"32 Chai Chee Road\", \"address\"] = \"32 Chai Chee Ave\"\ntemp_osm[temp_osm$address == \"89 Bedok North Avenue 4\", \"address\"] = \"89 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"86 Bedok North Avenue 4\", \"address\"] = \"86 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"293D Bukit Batok East Avenue 6\", \"address\"] = \"293D Bukit Batok Street 21\"\ntemp_osm[temp_osm$address == \"155 Bukit Batok West Avenue 8\", \"address\"] = \"155 Bukit Batok Street 11\"\ntemp_osm[temp_osm$address == \"460A Bukit Batok West Avenue 8\", \"address\"] = \"460A Bukit Batok West Avenue 9\"\ntemp_osm[temp_osm$address == \"463B Bukit Batok West Avenue 8\", \"address\"] = \"463B Bukit Batok West Avenue 9\"\ntemp_osm[temp_osm$address == \"84 Bedok North Avenue 4\", \"address\"] = \"84 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"85 Bedok North Avenue 4\", \"address\"] = \"85 Bedok North Street 4\"\ntemp_osm[temp_osm$address == \"111 Bukit Purmei Avenue\", \"address\"] = \"111 Bukit Purmei Rd\"\ntemp_osm[temp_osm$address == \"440C Clementi Close\", \"address\"] = \"440C Clementi Ave 3\"\ntemp_osm[temp_osm$address == \"439 Clementi Close\", \"address\"] = \"439 Clementi Ave 3\"\ntemp_osm[temp_osm$address == \"710A Ang Mo Kio Central 1\", \"address\"] = \"710A Ang Mo Kio Avenue 8\"\ntemp_osm[temp_osm$address == \"192C Punggol Road\", \"address\"] = \"192C Punggol Central\"\ntemp_osm[temp_osm$address == \"305D Punggol Road\", \"address\"] = \"305D Punggol Dr\"\ntemp_osm[temp_osm$address == \"980 Buangkok Green\", \"address\"] = \"980 Buangkok Cres\"\n\nUpdate 42 useful ones - HDB - 2 postal below\nTotal left = 30\nRerun get address for those updated (POSTAL NIL - 42)\n \n\nupd_proc_osm &lt;- temp_osm %&gt;% filter(postal == \"NIL\")\naddr_lst &lt;- sort(unique(upd_proc_osm$address))\npostal &lt;- get_postal(addr_lst)\n\nwrite_rds(postal, \"data/fyp_preprocessing/osm_append_bldgs_postal.rds\")\n\n\nOSM_BLDGS_POSTAL &lt;- read_rds(\"data/fyp_preprocessing/osm_bldgs_postal.rds\")\n\nOSM_BLDGS_APPEND_POSTAL &lt;- read_rds(\"data/fyp_preprocessing/osm_append_bldgs_postal.rds\")\n\nOSM_COMBINE_POSTAL &lt;- rbind(OSM_BLDGS_POSTAL, OSM_BLDGS_APPEND_POSTAL)\ntemp_osm$postal &lt;- NULL\ntemp_osm &lt;- left_join(temp_osm, OSM_COMBINE_POSTAL, by=c(\"address\" = \"address\"))\n\n\ntemp_osm[temp_osm$address == \"215 Choa Chu Kang Central\", \"postal\"] = \"680215\"\ntemp_osm[temp_osm$address == \"216 Choa Chu Kang Central\", \"postal\"] = \"680216\"\n\n\ntemp_view &lt;- temp_osm %&gt;% filter(postal == \"NIL\")\ntemp_view &lt;- temp_view %&gt;% filter(as.numeric(substr(address, 1, 2)) &gt;= 0)\nunique(temp_view$address)\n\n [1] \"10 Tuas Avenue 10\"                  \"15 Tuas Street\"                    \n [3] \"13 Tuas Avenue 13\"                  \"11 Tuas Avenue 11\"                 \n [5] \"2 Seragoon North Avenue 2\"          \"12 Artillery Avenue\"               \n [7] \"91 Hougang Avenue 3\"                \"85 Hougang Avenue 3\"               \n [9] \"215 Airport Road\"                   \"50 Clive Road\"                     \n[11] \"18 Baboo Lane\"                      \"3188 Geylang Bahru\"                \n[13] \"13 Jalan Sentosa\"                   \"73N Jalan Senang\"                  \n[15] \"91L Jalan Senang\"                   \"28 Lorong 28 Geylang\"              \n[17] \"34 Lorong 34 Geylang\"               \"224-J Jalan Endut Senin\"           \n[19] \"1003 Bukit Teresa Road\"             \"107\"                               \n[21] \"19 Harding Road\"                    \"20 Peirce Road\"                    \n[23] \"16 The Oval Seletar Aerospace Park\" \"11 Lorong 11 Geylang\"              \n[25] \"18 Spottiswoode\"                    \"28A West Jalan Lempeng\"            \n[27] \"28A East Jalan Lempeng\"             \"13 Clementi Crescent\"              \n[29] \"1007 Bukit Teresa Road\"             \"1005 Bukit Teresa Road\"            \n[31] \"13 Leo Drive\"                       \"468I Upper Changi Road\"            \n[33] \"20 Hindhede Place\"                  \"56E Marne Road\"                    \n[35] \"15 Lorong 15 Geylang\"              \n\n\n35 remaining - correct"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#aims",
    "href": "explore/fyp_preprocessing.html#aims",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "",
    "text": "To evaluate which data source is most complete and suitable\n\nOSM\ndata.gov.sg\n\nTo prepare the data sources for machine learning\n\nCombination of data sources, fields and manual intervention"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#onemap",
    "href": "explore/fyp_preprocessing.html#onemap",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "3.1 Onemap",
    "text": "3.1 Onemap\n\nget_postal &lt;- function(addr_lst){\n  \n  # Create a data frame to store all retrieved coordinates\n  new_postal &lt;- data.frame()\n  i = 0\n  for (addr in addr_lst){\n    i = i + 1\n    \n    if (i %% 100 == 0){\n     print(c(addr, as.character(i)))\n    }\n\n    reply &lt;- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query = list(searchVal = addr,\n                        returnGeom = 'N',\n                        getAddrDetails = 'Y'))\n    \n    output &lt;- fromJSON(rawToChar(reply$content))\n    found &lt;- output$found\n    res &lt;- output$results\n    \n    # Create a new data frame for each address\n    new_row &lt;- data.frame()\n    \n    # If single result, append \n    if (found &gt;= 1){\n      res_1 &lt;- head(res, n = 1)\n      postal &lt;- res_1$POSTAL\n      new_row &lt;- data.frame(address = addr, postal = postal)\n    }\n\n    else {\n      new_row &lt;- data.frame(address = addr, postal = NA)\n    }\n    \n    # Add the row\n    new_postal &lt;- rbind(new_postal, new_row)\n    remove(new_row)\n  }\n  return(new_postal)\n}\n\n\ntoken = \"\"\nget_postal_rev_geocode &lt;- function(addr_lst){\n  \n  # Create a data frame to store all retrieved coordinates\n  new_postal &lt;- data.frame()\n  for (i in 1:nrow(addr_lst)){\n\n    if (i == 100){\n          print(c(addr_lst[i,\"X\"][[1]], addr_lst[i,\"Y\"][[1]], as.character(i)))\n    }\n    query1 &lt;- paste(addr_lst[i,\"X\"][[1]], addr_lst[i,\"Y\"][[1]], sep = \",\")\n    reply &lt;- GET('https://www.onemap.gov.sg/api/public/revgeocodexy?',\n            query = list(location = query1,\n                        buffer = '50',\n                        addressType = 'HDB'),\n            add_headers(\"Content-Type\"=\"application/json\",\n            Accept=\"application/+json\",\n            \"Authorization\"= paste(\"Bearer\", token)))\n\n    \n    output &lt;- fromJSON(rawToChar(reply$content))\n    res &lt;- output$GeocodeInfo\n    found &lt;- length(res)\n\n    # Create a new data frame for each address\n    new_row &lt;- data.frame()\n    \n    # If single result, append \n    if (found &gt;= 1){\n      res_1 &lt;- head(res, n = 1)\n      if ((res_1$POSTALCODE) == \"NIL\"){\n        postal &lt;- NA\n      }\n      else{\n        postal &lt;- res_1$POSTALCODE\n      }\n      new_row &lt;- data.frame(X = addr_lst[i,\"X\"][[1]], Y = addr_lst[i, \"Y\"][[1]], postal = postal)\n    }\n\n    else {\n      new_row &lt;- data.frame(X = addr_lst[i,\"X\"][[1]], Y = addr_lst[i, \"Y\"][[1]], postal = NA)\n    }\n    \n    # Add the row\n    new_postal &lt;- rbind(new_postal, new_row)\n  }\n  return(new_postal)\n}"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#preparing-hdb-property-dataset",
    "href": "explore/fyp_preprocessing.html#preparing-hdb-property-dataset",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "4.2 Preparing HDB Property Dataset",
    "text": "4.2 Preparing HDB Property Dataset\nHDB Property dataset lacks postal code which allows us to combine the attributes with the geospatial datasets. Onemap search API is used to search for the postal code with the dataset’s address line.\nAdding Postal Codes to HDB Property Datasets - prepare to combine with HDB Buildings geospatial data\nRef https://renjieteo-is415.netlify.app/exercises/thex03#create-a-list-storing-unique-addressespostal-codeshttps://renjieteo-is415.netlify.app/exercises/thex03#create-a-list-storing-unique-addressespostal-codes\n\nHDB_PROPERTY &lt;- RAW_HDB_PROPERTY %&gt;%\n  mutate(RAW_HDB_PROPERTY, address = paste(blk_no, street))\n\nObtain postal codes from OneMap API\n\naddr_lst &lt;- sort(unique(HDB_PROPERTY$address))\npostal &lt;- get_postal(addr_lst)\n\nwrite_rds(postal, \"data/fyp_preprocessing/hdb_property_postal.rds\")\n\nCombine HDB Property data to HDB Buildings dataset\n\npostal &lt;- read_rds(\"data/fyp_preprocessing/hdb_property_postal.rds\")\ntemp_hdb_property &lt;- left_join(HDB_PROPERTY, postal, by=c(\"address\" = \"address\"))\n\n\ntemp_hdb_property &lt;- mutate(temp_hdb_property, postal_check = \n                     is.na(as.numeric(postal)) == FALSE)\n\ntemp_hdb_property %&gt;% filter(postal_check == FALSE)\n\n  blk_no             street max_floor_lvl year_completed residential commercial\n1    215 CHOA CHU KANG CTRL            11           1989           Y          Y\n2    216 CHOA CHU KANG CTRL             4           1989           Y          N\n  market_hawker miscellaneous multistorey_carpark precinct_pavilion\n1             N             N                   N                 N\n2             N             N                   N                 N\n  bldg_contract_town total_dwelling_units X1room_sold X2room_sold X3room_sold\n1                CCK                   90           0           0           0\n2                CCK                   16           0           0           0\n  X4room_sold X5room_sold exec_sold multigen_sold studio_apartment_sold\n1          90           0         0             0                     0\n2          16           0         0             0                     0\n  X1room_rental X2room_rental X3room_rental other_room_rental\n1             0             0             0                 0\n2             0             0             0                 0\n                 address postal postal_check\n1 215 CHOA CHU KANG CTRL    NIL        FALSE\n2 216 CHOA CHU KANG CTRL    NIL        FALSE\n\n\n\ntemp_hdb_property[temp_hdb_property$address == \"215 CHOA CHU KANG CTRL\", \"postal\"] = 680215\ntemp_hdb_property[temp_hdb_property$address == \"216 CHOA CHU KANG CTRL\", \"postal\"] = 680216\n\ntemp_hdb_property %&gt;% filter(postal_check == FALSE)\n\n  blk_no             street max_floor_lvl year_completed residential commercial\n1    215 CHOA CHU KANG CTRL            11           1989           Y          Y\n2    216 CHOA CHU KANG CTRL             4           1989           Y          N\n  market_hawker miscellaneous multistorey_carpark precinct_pavilion\n1             N             N                   N                 N\n2             N             N                   N                 N\n  bldg_contract_town total_dwelling_units X1room_sold X2room_sold X3room_sold\n1                CCK                   90           0           0           0\n2                CCK                   16           0           0           0\n  X4room_sold X5room_sold exec_sold multigen_sold studio_apartment_sold\n1          90           0         0             0                     0\n2          16           0         0             0                     0\n  X1room_rental X2room_rental X3room_rental other_room_rental\n1             0             0             0                 0\n2             0             0             0                 0\n                 address postal postal_check\n1 215 CHOA CHU KANG CTRL 680215        FALSE\n2 216 CHOA CHU KANG CTRL 680216        FALSE"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#osm",
    "href": "explore/fyp_preprocessing.html#osm",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "5.1 OSM",
    "text": "5.1 OSM\n\nosm_property_bldgs &lt;- left_join(temp_osm, temp_hdb_property, by=c(\"postal\" = \"postal\"))\nwrite_rds(osm_property_bldgs, \"data/fyp_preprocessing/osm_property_bldgs.rds\")\n\n\nosm_property_bldgs &lt;- read_rds(\"data/fyp_preprocessing/osm_property_bldgs.rds\")\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(osm_property_bldgs %&gt;% filter(bldg_contract_town == \"CCK\")) +\n  tm_fill(col = \"cyan\")"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#data-gov",
    "href": "explore/fyp_preprocessing.html#data-gov",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "5.2 Data Gov",
    "text": "5.2 Data Gov\nCombine the property data to hdb data\n\ndatagov_hdb_property_bldgs &lt;- left_join(hdb_bldgs, temp_hdb_property, by=c(\"POSTAL_COD\" = \"postal\"))\nwrite_rds(datagov_hdb_property_bldgs, \"data/fyp_preprocessing/datagov_hdb_property_bldgs.rds\")\n\n\ndatagov_hdb_property_bldgs &lt;- read_rds(\"data/fyp_preprocessing/datagov_hdb_property_bldgs.rds\")\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(datagov_hdb_property_bldgs %&gt;% filter(bldg_contract_town == \"CCK\")) +\n  tm_fill(col = \"cyan\")"
  },
  {
    "objectID": "explore/fyp_preprocessing.html#loading-mp19-dataset",
    "href": "explore/fyp_preprocessing.html#loading-mp19-dataset",
    "title": "Preprocessing of OSM Building Data (HDB)",
    "section": "7.1 Loading MP19 Dataset",
    "text": "7.1 Loading MP19 Dataset\n\nraw_mp19 = st_read(\"data/fyp_preprocessing/MasterPlan2019LandUselayer.geojson\")\n\nattributes &lt;- lapply(X = 1:nrow(raw_mp19), \n                     FUN = function(x) {\n\n                       raw_mp19 %&gt;% \n                         slice(x) %&gt;%\n                         pull(Description) %&gt;%\n                         read_html() %&gt;%\n                         html_node(\"table\") %&gt;%\n                         html_table(header = TRUE, trim = TRUE, dec = \".\", fill = TRUE) %&gt;%\n                         as_tibble(.name_repair = ~ make.names(c(\"Attribute\", \"Value\"))) %&gt;% \n                         pivot_wider(names_from = Attribute, values_from = Value)\n\n                     })\n\nmp19 &lt;- \n  raw_mp19 %&gt;%\n  bind_cols(bind_rows(attributes)) %&gt;%\n  select(-Description)\n\nmp19 &lt;- mp19 %&gt;% st_transform(crs = 3414)\nmp19 &lt;- st_zm(mp19)\nwrite_rds(mp19, \"data/fyp_preprocessing/mp19epsg3414.rds\")\n\n\nmp19 &lt;- read_rds(\"data/fyp_preprocessing/mp19epsg3414.rds\")\nmp19\n\nSimple feature collection with 113212 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 91863.62 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name          LU_DESC LU_TEXT  GPR WHI_Q_MX GPR_B_MN          INC_CRC\n1   kml_1       OPEN SPACE          EVA                   2481817E4931D054\n2   kml_2             ROAD         &lt;NA&gt;                   C56C3E0EA19D36D8\n3   kml_3 PLACE OF WORSHIP       W  EVA                   4EB80310CE2C1B60\n4   kml_4             ROAD         &lt;NA&gt;                   544B09AB3A799753\n5   kml_5       COMMERCIAL          EVA                   BB3AF1EBDFBB5AD9\n6   kml_6       BUSINESS 2          1.0                   344ED7728B4D6940\n7   kml_7       BUSINESS 2          2.5                   5BCB57488D4CFABD\n8   kml_8       BUSINESS 2          1.4                   EF5D3B3B047F4CCF\n9   kml_9       BUSINESS 2          1.4                   2248F66B8739A80B\n10 kml_10       BUSINESS 2          1.4                   B8032F4B1E617273\n       FMEL_UPD_D                       geometry\n1  20191209171707 MULTIPOLYGON (((26136.73 35...\n2  20191209171707 MULTIPOLYGON (((28224.06 35...\n3  20191209171707 MULTIPOLYGON (((17055.39 39...\n4  20191209171707 MULTIPOLYGON (((31712.04 43...\n5  20191209171707 MULTIPOLYGON (((31920.59 43...\n6  20191209171707 MULTIPOLYGON (((31560.7 431...\n7  20191209171707 MULTIPOLYGON (((6573.416 34...\n8  20191209171707 MULTIPOLYGON (((6539.517 34...\n9  20191209171707 MULTIPOLYGON (((6316.274 35...\n10 20191209171707 MULTIPOLYGON (((6288.463 35...\n\n\n\nmp19_resi &lt;- mp19 %&gt;% filter(LU_DESC == \"RESIDENTIAL\")\n\n\ncentr &lt;- st_centroid(datagov_hdb_property_bldgs)\n\n\ncentr\n\nSimple feature collection with 12854 features and 33 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 11519.15 ymin: 28097.64 xmax: 45292.59 ymax: 48738.63\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name BLK_NO ST_COD ENTITYID POSTAL_COD          INC_CRC     FMEL_UPD_D\n1   kml_1   780C WOC05L     1991     733780 B93627FDFF3D6313 20230328181025\n2   kml_2    373 BUS09S     6782     650373 49487496978A23EF 20130426120311\n3   kml_3    328 TAS39U     7578     520328 67E2089D8D4D20D0 20130426120323\n4   kml_4   771A CHS27B      307     681771 577EE045DEA00FEE 20130426120328\n5   kml_5     3A TEC01D     7332     091003 AF8FF795FF2C87EA 20130426120321\n6   kml_6   781C WOA05F    12799     733781 9257EC517D945A34 20230328181025\n7   kml_7    465 CRL00Q     6128     190465 FA7E0AEE86FFEA6A 20230328181025\n8   kml_8      2 STG00S     7153     322002 A0BBA1BEA0B7120C 20230328181025\n9   kml_9    778 WOD14U     9072     730778 9B399758F26B6046 20130426120335\n10 kml_10    862 WOS07U    12726     730862 3E0F54CD91F1FF15 20130426120332\n   blk_no              street max_floor_lvl year_completed residential\n1    780C      WOODLANDS CRES            16           2013           Y\n2     373      BT BATOK ST 31             3           1986           N\n3     328      TAMPINES ST 32            10           1993           Y\n4    771A CHOA CHU KANG ST 54             5           1995           N\n5      3A  TELOK BLANGAH CRES             3           2004           N\n6    781C     WOODLANDS AVE 9            16           2022           Y\n7     465       CRAWFORD LANE             2           1982           N\n8       2     ST. GEORGE'S RD            14           1975           Y\n9     778     WOODLANDS DR 60            14           1996           Y\n10    862     WOODLANDS ST 83            11           1994           Y\n   commercial market_hawker miscellaneous multistorey_carpark precinct_pavilion\n1           N             N             N                   N                 N\n2           Y             N             N                   N                 N\n3           Y             N             N                   N                 N\n4           N             N             N                   Y                 N\n5           N             N             N                   Y                 N\n6           N             N             N                   N                 N\n7           Y             N             N                   N                 N\n8           N             N             Y                   N                 N\n9           N             N             N                   N                 N\n10          N             N             Y                   N                 N\n   bldg_contract_town total_dwelling_units X1room_sold X2room_sold X3room_sold\n1                  WL                  135           0           0          30\n2                  BB                    0           0           0           0\n3                 TAP                   54           0           0           0\n4                 CCK                    0           0           0           0\n5                  BM                    0           0           0           0\n6                  WL                  209           0         105          45\n7                 KWN                    0           0           0           0\n8                 KWN                  154           0           0         152\n9                  WL                  111           0           0           0\n10                 WL                   60           0           0           0\n   X4room_sold X5room_sold exec_sold multigen_sold studio_apartment_sold\n1          105           0         0             0                     0\n2            0           0         0             0                     0\n3            0           0        54             0                     0\n4            0           0         0             0                     0\n5            0           0         0             0                     0\n6           59           0         0             0                     0\n7            0           0         0             0                     0\n8            0           2         0             0                     0\n9           61          50         0             0                     0\n10           0          60         0             0                     0\n   X1room_rental X2room_rental X3room_rental other_room_rental\n1              0             0             0                 0\n2              0             0             0                 0\n3              0             0             0                 0\n4              0             0             0                 0\n5              0             0             0                 0\n6              0             0             0                 0\n7              0             0             0                 0\n8              0             0             0                 0\n9              0             0             0                 0\n10             0             0             0                 0\n                    address postal_check                  geometry\n1       780C WOODLANDS CRES         TRUE  POINT (24458.3 47864.69)\n2        373 BT BATOK ST 31         TRUE POINT (18771.81 37888.65)\n3        328 TAMPINES ST 32         TRUE POINT (41907.43 37272.88)\n4  771A CHOA CHU KANG ST 54         TRUE POINT (18723.77 41826.05)\n5     3A TELOK BLANGAH CRES         TRUE POINT (26246.54 29052.02)\n6      781C WOODLANDS AVE 9         TRUE  POINT (24561.8 47839.54)\n7         465 CRAWFORD LANE         TRUE POINT (31274.88 31941.64)\n8         2 ST. GEORGE'S RD         TRUE POINT (31045.58 33963.12)\n9       778 WOODLANDS DR 60         TRUE POINT (24250.93 47670.21)\n10      862 WOODLANDS ST 83         TRUE POINT (23747.73 46856.38)\n\n\n\ndatagov_hdb_property_bldgs_proc &lt;- st_intersection(datagov_hdb_property_bldgs, mp19_resi)\n\n\ndatagov_hdb_property_bldgs_proc\n\nSimple feature collection with 12245 features and 41 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 11467.71 ymin: 28056.22 xmax: 42690.47 ymax: 48760.3\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n           Name BLK_NO ST_COD ENTITYID POSTAL_COD          INC_CRC\n296     kml_296    358 YUA01W     7923     610358 1DA3319CE95B9EAA\n991     kml_991    362 YUA01W     4763     610362 402DDE98AE8446E1\n2192   kml_2189    359 YUA01W     2493     610359 D5431A5190A5A7C3\n2608   kml_2604    360 YUA01W     3543     610360 C6A3D5997AF2E121\n4025   kml_4021    361 YUA01W     8564     610361 664439D7A8DCECF7\n5329   kml_5323    369 YUA01W     5315     610369 DB9F10056EF2A6B2\n6888   kml_6882    357 YUA01W     5609     610357 EAE4A26A3B09A3AE\n6934   kml_6928    363 YUA01W     4985     610363 6BFE50399FBD3A21\n11072 kml_11066    367 COD04N     2646     610367 73004673D47CC95D\n11295 kml_11288    368 COD04N     2798     610368 E950D11DA5671555\n          FMEL_UPD_D blk_no         street max_floor_lvl year_completed\n296   20130426120326    358     YUNG AN RD            15           1994\n991   20130426120247    362     YUNG AN RD            10           1994\n2192  20130426120222    359     YUNG AN RD            15           1994\n2608  20130426120236    360     YUNG AN RD            12           1994\n4025  20130426120334    361     YUNG AN RD            12           1994\n5329  20130426120254    369     YUNG AN RD            10           1993\n6888  20130426120258    357     YUNG AN RD            15           1994\n6934  20130426120254    363     YUNG AN RD            10           1994\n11072 20130426120227    367 CORPORATION DR            10           1996\n11295 20130426120224    368 CORPORATION DR            10           1996\n      residential commercial market_hawker miscellaneous multistorey_carpark\n296             Y          N             N             N                   N\n991             Y          Y             N             N                   N\n2192            Y          N             N             Y                   N\n2608            Y          N             N             N                   N\n4025            Y          N             N             Y                   N\n5329            Y          N             N             N                   N\n6888            Y          N             N             N                   N\n6934            Y          N             N             N                   N\n11072           Y          N             N             N                   N\n11295           Y          Y             N             N                   N\n      precinct_pavilion bldg_contract_town total_dwelling_units X1room_sold\n296                   N                 JW                   56           0\n991                   N                 JW                   36           0\n2192                  N                 JW                  126           0\n2608                  N                 JW                   92           0\n4025                  N                 JW                  114           0\n5329                  N                 JW                   45           0\n6888                  N                 JW                   86           0\n6934                  N                 JW                   36           0\n11072                 N                 JW                   81           0\n11295                 N                 JW                   90           0\n      X2room_sold X3room_sold X4room_sold X5room_sold exec_sold multigen_sold\n296             0           0           0          56         0             0\n991             0           0           0           0        36             0\n2192            0           0          84          42         0             0\n2608            0           0          70          22         0             0\n4025            0           0          92          22         0             0\n5329            0           0           0           0        45             0\n6888            0           0          44          42         0             0\n6934            0           0           0           0        36             0\n11072           0           0          45          36         0             0\n11295           0           0          54          36         0             0\n      studio_apartment_sold X1room_rental X2room_rental X3room_rental\n296                       0             0             0             0\n991                       0             0             0             0\n2192                      0             0             0             0\n2608                      0             0             0             0\n4025                      0             0             0             0\n5329                      0             0             0             0\n6888                      0             0             0             0\n6934                      0             0             0             0\n11072                     0             0             0             0\n11295                     0             0             0             0\n      other_room_rental            address postal_check   Name.1     LU_DESC\n296                   0     358 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n991                   0     362 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n2192                  0     359 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n2608                  0     360 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n4025                  0     361 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n5329                  0     369 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n6888                  0     357 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n6934                  0     363 YUNG AN RD         TRUE kml_1319 RESIDENTIAL\n11072                 0 367 CORPORATION DR         TRUE kml_1319 RESIDENTIAL\n11295                 0 368 CORPORATION DR         TRUE kml_1319 RESIDENTIAL\n      LU_TEXT GPR WHI_Q_MX GPR_B_MN        INC_CRC.1   FMEL_UPD_D.1\n296           2.8                   C07C7D1E8897E480 20191209171707\n991           2.8                   C07C7D1E8897E480 20191209171707\n2192          2.8                   C07C7D1E8897E480 20191209171707\n2608          2.8                   C07C7D1E8897E480 20191209171707\n4025          2.8                   C07C7D1E8897E480 20191209171707\n5329          2.8                   C07C7D1E8897E480 20191209171707\n6888          2.8                   C07C7D1E8897E480 20191209171707\n6934          2.8                   C07C7D1E8897E480 20191209171707\n11072         2.8                   C07C7D1E8897E480 20191209171707\n11295         2.8                   C07C7D1E8897E480 20191209171707\n                            geometry\n296   POLYGON ((15449.64 35400.5,...\n991   POLYGON ((15389.96 35394.93...\n2192  POLYGON ((15540.1 35385.88,...\n2608  POLYGON ((15474.56 35365.71...\n4025  POLYGON ((15409.06 35345.44...\n5329  POLYGON ((15364.53 35482.72...\n6888  POLYGON ((15501.56 35450.46...\n6934  POLYGON ((15383.46 35405.14...\n11072 POLYGON ((15319.35 35590.64...\n11295 POLYGON ((15315.5 35535.95,...\n\n\n\ntemp_export &lt;- select(datagov_hdb_property_bldgs_proc, c(\"Name\", \"ST_COD\", \"POSTAL_COD\", \"blk_no\", \"street\", \"max_floor_lvl\", \"year_completed\", \"bldg_contract_town\", \"address\", \"Name.1\", \"LU_DESC\", \"GPR\"))\ntemp_export &lt;- st_collection_extract(temp_export, \"POLYGON\")\nst_write(temp_export, dsn = \"data/fyp_preprocessing/hdb_buildings/hdb_buildings20240820.shp\")\n\n\nst_write(mp19_resi, dsn = \"data/fyp_preprocessing/mp19/mp19resi20240820.shp\")"
  }
]