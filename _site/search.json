[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "explore/index.html",
    "href": "explore/index.html",
    "title": "UrbanCoalesce // Explore",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\n[WIP] Bus Service 167: Travel Pattern Analysis\n\n\n\n\n\nAnalysis of Travel Patterns Using OD-Matrix provided by LTA\n\n\n\n\n\n\nDec 23, 2023\n\n\nTeo Ren Jie\n\n\n22 min\n\n\n\n\n\n\n  \n\n\n\n\nSample Python Document\n\n\n\n\n\nThis is a document to test python\n\n\n\n\n\n\nNov 26, 2023\n\n\nTeo Ren Jie\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "explore/sample_doc.html",
    "href": "explore/sample_doc.html",
    "title": "Sample Python Document",
    "section": "",
    "text": "reticulate::repl_python()\n\nexit\n\n\n\na = 1 + 3\n\n\n\n\n\nprint(a)\n\n4"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Teo Ren Jie",
    "section": "",
    "text": "About Me\n\n\nI am Ren Jie, a Year 3 Information Systems undergraduate at the Singapore Management University, majoring in Digitalisation & Cloud Solutions and Urban Science. I also hold a Diploma in Architecture from Singapore Polytechnic, having a good understanding of the planning, design, policy and regulatory aspects of the built environment.\nMy main interest is in urban science research, focusing in areas of sustainability and transport flows. I have summarised it in three key pointers:\n\nUnderstanding data generated by urban cities\nAnalysing and drawing conclusions from data\nComing up with actionable solutions against urban issues\n\nI believe that these skills will allow gaps in the current urban planning and design ecosystem be filled, closing the loop between the planner and the data scientist, allowing more insights to be effectively derived through a clearer understanding of both ends of the spectrum.\nMy Urban Science second major is an encapsulates my academic journey and interests in the analysis, exploitation and application of data in the context of the city and built environment.\n\n\n\nMore About This Site\n\n\n\n\n\n\n\nWarning\n\n\n\nThis site is still a work in progress!\n\n\n\n\n\n\n\nKey Information\n\n\nHighlightsEducationKey ProjectsWork Experience\n\n\n\nxx\n\n\n\nBSc Information Systems - Singapore Management University (2021 - 2025)\n\nFirst Major in Digitalisation and Cloud Solutions and Business Analytics\nSecond Major in Urban Science\n\nUrban Planning, Design, Geospatial Analytics, Data Science\n\n\nExchange Programme - University of Leeds (2024)\n\nGeography and Transport Studies\n\nUrban Transformation, Sustainability, Transport Policy, Transport and Social Psychology\n\n\nDip Architecture - Singapore Polytechnic (2016 - 2019)\n\nArchitecture\n\nBuilt Environment, Architecture, Sustainability\n\n\n\n\n\nxx\n\n\n\nData Science Intern - Urban Redevelopment Authority of Singapore (May 2023 - July 2023)\nNational Service - Republic of Singapore Air Force (May 2019 - May 2021)\nTechnical Assistant - Land Transport Authority Singapore (May 2022 - Aug 2022, Apr 2019 - May 2019)\nProject Management Intern - Land Transport Authority Singapore (Mar 2018 - Jun 2018)\n\n\n\n\n\n\n\nFind Me\n\nConnect with me on LinkedIn or contact me through email!"
  },
  {
    "objectID": "portfolio.html",
    "href": "portfolio.html",
    "title": "Portfolio",
    "section": "",
    "text": "Nothing here for now!\n\n\n\n\n\n\nWarning\n\n\n\nThis site is still a work in progress!"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "UrbanCoalesce",
    "section": "",
    "text": "UrbanCoalesce\nThis repository contains the Quarto and assets for the renjieteo.comwebsite"
  },
  {
    "objectID": "explore/167_OD_analysis.html",
    "href": "explore/167_OD_analysis.html",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "",
    "text": "Caution\n\n\n\nThis article and analysis is a work-in-progress! Please read and interpret results at your own risk, check back for the final article!"
  },
  {
    "objectID": "explore/167_OD_analysis.html#setting-up",
    "href": "explore/167_OD_analysis.html#setting-up",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "2.1 Setting Up",
    "text": "2.1 Setting Up\nPackages required to be loaded for\n\npacman::p_load(dplyr, readr, sf, tidyverse, tmap, sfdep, ggpubr, Metrics, ggplot2, plotly, spdep, rjson, od, gifski, stplanr)"
  },
  {
    "objectID": "explore/167_OD_analysis.html#issue",
    "href": "explore/167_OD_analysis.html#issue",
    "title": "Bus Service 167: Travel Pattern Analysis",
    "section": "1.1 Issue",
    "text": "1.1 Issue\nGiven the"
  },
  {
    "objectID": "explore/167_OD_analysis.html#objectives",
    "href": "explore/167_OD_analysis.html#objectives",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "1.2 Objectives",
    "text": "1.2 Objectives\nUnderstand more about the initial failure of the route rationalisation of bus service 167:\n\nCommuters perspective\nWhy a hub-and-spoke approach (with the introduction of Thomson East Coast Line) is insufficient to shift demand? [pending analysis]\n\nClick here to skip to the analysis"
  },
  {
    "objectID": "explore/167_OD_analysis.html#data-sources",
    "href": "explore/167_OD_analysis.html#data-sources",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "2.2 Data Sources",
    "text": "2.2 Data Sources\n\n\n\nDataset Name\nSource\nMethodology\n\n\n\n\nOrigin-Destination Passenger Count for Buses (OD) Nov 2023\nLTA Datamall\nAPI\n\n\nBus Routes as of 26 Nov 2023\nLTA Datamall\nAPI\n\n\nBus Stops as of 26 Nov 2023\nLTA Datamall\nAPI"
  },
  {
    "objectID": "explore/167_OD_analysis.html#loading-data",
    "href": "explore/167_OD_analysis.html#loading-data",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "3.1 Loading Data",
    "text": "3.1 Loading Data\nLoading the Origin-Destination Passenger Count for Buses\n\nOD_2023_11 &lt;- read.csv(\"data/167_OD_analysis/origin_destination_bus_202311.csv\")\n\nLoading the Bus Routes JSON file:\n\nBUS_ROUTE &lt;- fromJSON(file=\"data/167_OD_analysis/busroute_2023-11-26.json\")\n\nLoading the Bus Stops JSON file:\n\nBUS_STOP &lt;- fromJSON(file=\"data/167_OD_analysis/busstop_2023-11-26.json\")\n\nLoading the Bus Service JSON file:\n\nBUS_SERVICE &lt;- fromJSON(file=\"data/167_OD_analysis/busservice_2023-11-26.json\")\n\nLoad MPSZ (2019):\n\nmpsz &lt;- st_read(dsn = \"data/167_OD_analysis/\",\n                   layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\Users\\boylu\\OneDrive - Singapore Management University\\0_git-projects\\urbancoalesce\\explore\\data\\167_OD_analysis' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "explore/167_OD_analysis.html#extracting-relevant-information",
    "href": "explore/167_OD_analysis.html#extracting-relevant-information",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "3.3 Extracting Relevant Information",
    "text": "3.3 Extracting Relevant Information\nFor the OD Passenger Count, we are only interested in obtaining counts which involves bus service 167. We will need to extract it twice, once for each direction.\nWe are not implementing a check for stops since the JSON data from LTA Datamall is returned in stop sequence.\n\n3.3.1 Extract 167 Bus Stops\n\n\n\n\n\n\nNote\n\n\n\nAs LTA’s OD Count stores CBD area bus stops starting with 0 as 4 digit codes instead of 5 digit prefixed with 0, we recode the bus stops as numeric and drop the ‘0’ prefix\n\n\n\nBS_167_DIR_1_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\nBS_167_DIR_2_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\n\nfor (route_info in BUS_ROUTE){\n  if (route_info$ServiceNo == \"167\"){\n    if (route_info$Direction == 1){\n      BS_167_DIR_1_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_1_DF[nrow(BS_167_DIR_1_DF) +1,] &lt;- BS_167_DIR_1_temp\n    }\n    else if (route_info$Direction == 2){\n      BS_167_DIR_2_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_2_DF[nrow(BS_167_DIR_2_DF) +1,] &lt;- BS_167_DIR_2_temp  \n    }\n  }\n}\n\nrm(BS_167_DIR_1_temp)\nrm(BS_167_DIR_2_temp)\n\n\n\n3.3.2 Append Bus Stop Names to DataFrame\nWe convert the List format of Bus Stops to a more workable DataFrame format\n\nBUS_STOP_DF &lt;- data.frame(BS_Code = integer(), BS_Road_Name = character(), BS_Name = character(), Latitude = double(), Longitude = double())\nfor (bs in BUS_STOP){\n  BS_TEMP &lt;- data.frame(BS_Code = as.numeric(bs$BusStopCode), BS_Road_Name = bs$RoadName, BS_Name = bs$Description, Latitude = as.numeric(bs$Latitude), Longitude = as.numeric(bs$Longitude))\n  BUS_STOP_DF[nrow(BUS_STOP_DF) +1,] &lt;- BS_TEMP  \n}\nrm(BS_TEMP)\n\nWe then do a left join, merging the bus stop info into Bus Service direction DataFrames\n\nBS_167_DIR_1_DF &lt;- merge(x=BS_167_DIR_1_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\nBS_167_DIR_2_DF &lt;- merge(x=BS_167_DIR_2_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\n\n\n\n3.3.3 Reset Row Index Numbering\n\nrownames(BS_167_DIR_1_DF) &lt;- BS_167_DIR_1_DF$Seq\nrownames(BS_167_DIR_2_DF) &lt;- BS_167_DIR_2_DF$Seq\n\n\n\n3.3.4 Extract OD Passenger Count Related to 167\nExtracting the Direction 1 OD Data\n\nOD_2023_11_DIR1 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_1_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_1_DF$BS_Code)\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_1 &lt;- n_distinct(OD_2023_11_DIR1$ORIGIN_PT_CODE)\nnum_stops_OD_1\n\n[1] 71\n\nnum_stops_OD_1 == nrow(BS_167_DIR_1_DF)\n\n[1] TRUE\n\n\nExtracting the Direction 2 OD Data\n\nOD_2023_11_DIR2 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_2_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_2_DF$BS_Code)\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_2 &lt;- n_distinct(OD_2023_11_DIR2$ORIGIN_PT_CODE)\nnum_stops_OD_2\n\n[1] 69\n\nnum_stops_OD_2 == nrow(BS_167_DIR_2_DF)\n\n[1] TRUE\n\n\n\n\n3.3.5 Extract Bus Route Info to DataFrame\nWe save information that is required for our analysis from JSON to DataFrame format\n\nBUS_ROUTE_DF &lt;- data.frame(Service_No = character(), Direction = integer(), Seq = integer(), BS_Code = integer(), Distance = double(), WD_FirstBus = integer(), WD_LastBus = integer(), SAT_FirstBus = integer(), SAT_LastBus = integer(), SUN_FirstBus = integer(), SUN_LastBus = integer())\nfor (route in BUS_ROUTE){\n  BS_RT_TEMP &lt;- data.frame(ServiceNo = route$ServiceNo, Direction = as.numeric(route$Direction), Seq = as.numeric(route$StopSequence), BS_Code = as.numeric(route$BusStopCode), Distance = as.numeric(route$Distance), WD_FirstBus = as.numeric(route$WD_FirstBus), WD_LastBus = as.numeric(route$WD_LastBus), SAT_FirstBus = as.numeric(route$SAT_FirstBus), SAT_LastBus = as.numeric(route$SAT_LastBus), SUN_FirstBus = as.numeric(route$SUN_FirstBus), SUN_LastBus = as.numeric(route$SUN_LastBus))\n  BUS_ROUTE_DF[nrow(BUS_ROUTE_DF) +1,] &lt;- BS_RT_TEMP  \n}\nrm(BS_RT_TEMP)\n\n\n\n3.3.6 Extract Bus Service Info to DataFrame\n\nBUS_SVC_DF &lt;- data.frame(Service_No = character(), Direction = integer(), Category = character(), AM_Peak_Freq = character(), AM_OffPeak_Freq = character(), PM_Peak_Freq = character(), PM_OffPeak_Freq = character(), LoopDesc = character())\nfor (svc in BUS_SERVICE){\n  BS_SVC_TEMP &lt;- data.frame(Service_No = svc$ServiceNo, Direction = as.numeric(svc$Direction), Category = svc$Category, AM_Peak_Freq = svc$AM_Peak_Freq, AM_OffPeak_Freq = svc$AM_Offpeak_Freq, PM_OffPeak_Freq = svc$PM_Offpeak_Freq, PM_Peak_Freq = svc$PM_Peak_Freq, LoopDesc = svc$LoopDesc)\n  BUS_SVC_DF[nrow(BUS_SVC_DF) +1,] &lt;- BS_SVC_TEMP  \n}\nrm(BS_SVC_TEMP)\n\n\n\n3.3.7 Discard Unneeded Variables\n\nrm(BUS_ROUTE)\nrm(BUS_SERVICE)\nrm(route)\nrm(svc)\nrm(bs)\nrm(route_info)"
  },
  {
    "objectID": "explore/167_OD_analysis.html#extracting-relevant-information-1",
    "href": "explore/167_OD_analysis.html#extracting-relevant-information-1",
    "title": "Bus Service 167: Travel Pattern Analysis",
    "section": "3.3 Extracting Relevant Information",
    "text": "3.3 Extracting Relevant Information\nFor the OD Passenger Count, we are only interested in obtaining counts which involves bus service 167. We will need to extract it twice, once for each direction.\nWe are not implementing a check for stops since the JSON data from LTA Datamall is returned in stop sequence.\n\n3.3.1 Extract 167 Bus Stops\n\n\n\n\n\n\nNote\n\n\n\nAs LTA’s OD Count stores CBD area bus stops starting with 0 as 4 digit codes instead of 5 digit prefixed with 0, we recode the bus stops as numeric and drop the ‘0’ prefix\n\n\n\nBS_167_DIR_1_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\nBS_167_DIR_2_DF &lt;- data.frame(Seq =  integer(), BS_Code = integer())\n\nfor (route_info in BUS_ROUTE){\n  if (route_info$ServiceNo == \"167\"){\n    if (route_info$Direction == 1){\n      BS_167_DIR_1_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_1_DF[nrow(BS_167_DIR_1_DF) +1,] &lt;- BS_167_DIR_1_temp\n    }\n    else if (route_info$Direction == 2){\n      BS_167_DIR_2_temp &lt;- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))\n      BS_167_DIR_2_DF[nrow(BS_167_DIR_2_DF) +1,] &lt;- BS_167_DIR_2_temp  \n    }\n  }\n}\n\nrm(BS_167_DIR_1_temp)\nrm(BS_167_DIR_2_temp)\n\n\n\n3.3.2 Append Bus Stop Names to DataFrame\nWe convert the List format of Bus Stops to a more workable DataFrame format\n\nBUS_STOP_DF &lt;- data.frame(BS_Code = integer(), BS_Road_Name = character(), BS_Name = character(), Latitude = double(), Longitude = double())\nfor (bs in BUS_STOP){\n  BS_TEMP &lt;- data.frame(BS_Code = as.numeric(bs$BusStopCode), BS_Road_Name = bs$RoadName, BS_Name = bs$Description, Latitude = as.numeric(bs$Latitude), Longitude = as.numeric(bs$Longitude))\n  BUS_STOP_DF[nrow(BUS_STOP_DF) +1,] &lt;- BS_TEMP  \n}\nrm(BS_TEMP)\n\nWe then do a left join, merging the bus stop info into Bus Service direction DataFrames\n\nBS_167_DIR_1_DF &lt;- merge(x=BS_167_DIR_1_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\nBS_167_DIR_2_DF &lt;- merge(x=BS_167_DIR_2_DF,y=BUS_STOP_DF, \n             by=\"BS_Code\", all.x=TRUE)\n\n\n\n3.3.3 Reset Row Index Numbering\n\nrownames(BS_167_DIR_1_DF) &lt;- BS_167_DIR_1_DF$Seq\nrownames(BS_167_DIR_2_DF) &lt;- BS_167_DIR_2_DF$Seq\n\n\n\n3.3.4 Extract OD Passenger Count Related to 167\nExtracting the Direction 1 OD Data\n\nOD_2023_11_DIR1 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_1_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_1_DF$BS_Code)\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_1 &lt;- n_distinct(OD_2023_11_DIR1$ORIGIN_PT_CODE)\nnum_stops_OD_1\n\n[1] 71\n\nnum_stops_OD_1 == nrow(BS_167_DIR_1_DF)\n\n[1] TRUE\n\n\nExtracting the Direction 2 OD Data\n\nOD_2023_11_DIR2 &lt;- OD_2023_11 %&gt;% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_2_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_2_DF$BS_Code)\n\nJust to check if the number of bus stops extracted matches the number of stops we have\n\nnum_stops_OD_2 &lt;- n_distinct(OD_2023_11_DIR2$ORIGIN_PT_CODE)\nnum_stops_OD_2\n\n[1] 69\n\nnum_stops_OD_2 == nrow(BS_167_DIR_2_DF)\n\n[1] TRUE"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Teo Ren Jie",
    "section": "Education",
    "text": "Education\n\nBSc Information Systems - Singapore Management University (2021 - 2025)\n\nFirst Major in Digitalisation and Cloud Solutions and Business Analytics\nSecond Major in Urban Science\n\nUrban Planning, Design, Geospatial Analytics, Data Science\n\n\nExchange Programme - University of Leeds (2024)\n\nGeography and Transport Studies\n\nUrban Transformation, Sustainability, Transport Policy, Transport and Social Psychology\n\n\nDip Architecture - Singapore Polytechnic (2016 - 2019)\n\nArchitecture\n\nBuilt Environment, Architecture, Sustainability"
  },
  {
    "objectID": "index.html#key-projects",
    "href": "index.html#key-projects",
    "title": "Teo Ren Jie",
    "section": "Key Projects",
    "text": "Key Projects"
  },
  {
    "objectID": "explore/data/167_OD_analysis/MPSZ-2019.html",
    "href": "explore/data/167_OD_analysis/MPSZ-2019.html",
    "title": "UrbanCoalesce",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "explore/167_OD_analysis.html#background",
    "href": "explore/167_OD_analysis.html#background",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "1.1 Background",
    "text": "1.1 Background\nWith the introduction of Thomson East Coast Line 3 between Caldecott and Gardens by the Bay stations, bridging the Upper Thomson area towards the city, the Land Transport Authority of Singapore (LTA) sought to reduce duplication of bus routes with new train lines, which was common practice in Singapore.\nYet, the announcement of the discontinuation of bus service 167 was widely"
  },
  {
    "objectID": "explore/167_OD_analysis.html#define-static-variables",
    "href": "explore/167_OD_analysis.html#define-static-variables",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "3.2 Define Static Variables",
    "text": "3.2 Define Static Variables\n\n3.2.1 Information of Month\n\nWEEKDAY_OF_MONTH = 21\nSUN_PH_OF_MONTH = 5\nSAT_OF_MONTH = 4\nWEEKEND_OF_MONTH = SUN_PH_OF_MONTH + SAT_OF_MONTH\n\n\n\n3.2.2 Normalise Data\nAs the OD data from LTA sums trips from entire month, we need to normalise them to trips per day for ease of comparison between Weekdays, Saturdays and Sun_PH.\n\nOD_2023_11 &lt;- OD_2023_11 %&gt;% mutate(TOTAL_TRIPS = ifelse(DAY_TYPE==\"WEEKENDS/HOLIDAY\", TOTAL_TRIPS / WEEKEND_OF_MONTH, TOTAL_TRIPS / WEEKDAY_OF_MONTH ))"
  },
  {
    "objectID": "explore/167_OD_analysis.html#normalisation-of-values",
    "href": "explore/167_OD_analysis.html#normalisation-of-values",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "5.1 Normalisation of values",
    "text": "5.1 Normalisation of values\nOD Matrix shows flows between pairs of bus stops. For bus stop pairs served by different services, they will contribute to the same OD count.\nThis is especially evident in certain bus stop pairs, such as BS 40189 Newton Stn Exit B to BS 09219 Far East Plaza, amongst others, where commuters would likely hop on any of the many buses along the road.\n\n5.1.0.1 Methodology\nWe will use this formula in calculating and estimating the OD flows for 167 bus stops using this formula below.\n&lt;insert latex formula&gt;\nBus Per Hour (BPH) for given service at given hour = 60 / Average Frequency at given timing for the given service*\n* if given service operates at 8 - 12 min during AM Peak, 10 minutes will be used, hence, computing a 10 min interval between buses and 6 buses per hour (bph)\nFlow between OD Pair for a given service at given hour = Total Flow between OD Pair at given hr x (BPH for given service at given hour / Sum of BPH on all services servicing between OD Pair at given hr) ^\n\n\n5.1.0.2 ^ Rules\n\nTrip distance of services shall not exceed 3km of mean distance of all services between the OD pair for normal services (non-express)\n\nIf services takes a large detour, we assume that passengers will not be inclined to take the detour of services since its longer\n\nExclusion of services that charges express fares (Express or City Direct) if OD pair is less than 5km (ie. shorter than ‘express’ sector)\n\nIssues with assumptions:\n\nAssumes uniform distribution across all services\nFor express services with express sectors, it is hard to estimate the split of passengers taking normal and express services - Assumption will be that they are equal\n\n\n\n5.1.0.3 Computing\nAs LTA’s data does not provide a differentiation for bus frequencies on weekdays and weekends, we will take the average time between the intervals provided\nAdditionally, we will derive the frequencies as follows:\n\nFor the following timings below, LTA’s definition will be used, we will use the average of the frequency band provided:\n\nAM Peak - 0630h to 0830h\nAM Off Peak - 0831h to 1659h\nPM Peak - 1700h to 1900h\nPM Off Peak - after 1900h\n\nFor the following timings below:\n\nFrom start of service to 0630h - We take upper limit of AM Peak frequency\n\n\n\nnorm_bph &lt;- function(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN){\n  # check operational\n  if (HOUR &lt; 3){\n    HOUR &lt;- HOUR + 24\n    if (NUM_DAY_OF_WEEK &gt; 1){\n      NUM_DAY_OF_WEEK &lt;- NUM_DAY_OF_WEEK - 1\n    }\n    else{\n      NUM_DAY_OF_WEEK &lt;- 7\n    }\n  }\n  \n  total_time &lt;- norm_bph_bs_operational(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN)\n  if (total_time == -1){\n    return (0)\n  }\n  else {\n \n    SEL_BUS_SVC &lt;- BUS_SVC_DF %&gt;% filter(Service_No == BUS_SVC & Direction == DIR)\n\n    if (HOUR &gt;= 19){\n      time &lt;- strsplit(SEL_BUS_SVC$PM_OffPeak_Freq, \"-\")\n      freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      \n      bph &lt;- total_time / freq\n    }\n    else if(HOUR &gt;= 17 && HOUR &lt; 19){\n      time &lt;- strsplit(SEL_BUS_SVC$PM_Peak_Freq, \"-\")\n      freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      \n      bph &lt;- total_time / freq\n    }\n    else if(HOUR &gt;= 9 && HOUR &lt; 17){\n      time &lt;- strsplit(SEL_BUS_SVC$AM_OffPeak_Freq, \"-\")\n      freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      \n      bph &lt;- total_time / freq\n    }    \n    else if(HOUR == 8){\n      time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n      freq1 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n      time &lt;- strsplit(SEL_BUS_SVC$AM_OffPeak_Freq, \"-\")\n      freq2 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n    \n      if (total_time &lt;= 30){\n        bph &lt;- total_time / freq1\n      }\n      else{\n        temp_bph &lt;- total_time / freq1\n        bph &lt;- ((((total_time - 30) / freq2) + temp_bph) / 2)\n      }\n    }        \n    else if(HOUR == 7){\n      time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n      freq &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n\n      bph &lt;- total_time / freq\n    }  \n    else if(HOUR == 6){\n      time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n      freq1 &lt;- as.numeric(time[[1]][2])\n      time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n      freq2 &lt;- (as.numeric(time[[1]][1]) + as.numeric(time[[1]][2])) / 2\n    \n      if (total_time &lt;= 30){\n        bph &lt;- total_time / freq1\n      }\n      else{\n        temp_bph &lt;- total_time / freq1\n        bph &lt;- ((((total_time - 30) / freq2) + temp_bph) / 2)\n      }\n    }  \n    else if(HOUR &gt;= 4 && HOUR &lt; 6){\n      time &lt;- strsplit(SEL_BUS_SVC$AM_Peak_Freq, \"-\")\n      freq &lt;- as.numeric(time[[1]][2])\n      \n      bph &lt;- total_time / freq\n    }  \n    return (bph)\n    \n  }\n  \n}\n\nnorm_bph_bs_operational &lt;- function(BUS_SVC, DIR, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, BS_SEQ_ORIGIN){\n  # BS_SEQ_ORIGIN verifies that it is the correct bus stop (eg. starting stop instead of ending terminus)\n  SEL_BUS_ROUTE &lt;- BUS_ROUTE_DF %&gt;% filter(Service_No == BUS_SVC & BS_Code == BS_CODE_ORIGIN & Direction == DIR & Seq == BS_SEQ_ORIGIN)\n  temp_timing &lt;- -1\n  if (NUM_DAY_OF_WEEK &gt; 0 & NUM_DAY_OF_WEEK &lt; 6){\n    if (is.na(SEL_BUS_ROUTE$WD_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$WD_LastBus &lt; 3 * 100){\n      WD_LastBus &lt;- 2400 + SEL_BUS_ROUTE$WD_LastBus\n    }\n    else{\n      WD_LastBus &lt;- SEL_BUS_ROUTE$WD_LastBus\n    }\n    if ((SEL_BUS_ROUTE$WD_FirstBus &lt; (as.numeric(HOUR) * 100)) && (WD_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- WD_LastBus - as.numeric(HOUR) * 100 \n    }\n    else if ((SEL_BUS_ROUTE$WD_FirstBus == (as.numeric(HOUR) * 100)) && (WD_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$WD_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$WD_FirstBus == (as.numeric(HOUR) * 100)) && (WD_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- WD_LastBus - SEL_BUS_ROUTE$WD_FirstBus\n    }\n  } \n  else if (NUM_DAY_OF_WEEK == 6){\n    if (is.na(SEL_BUS_ROUTE$SAT_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$SAT_LastBus &lt; 3 * 100){\n      Sat_LastBus &lt;- 2400 + SEL_BUS_ROUTE$SAT_LastBus\n    }\n    else{\n      Sat_LastBus &lt;- SEL_BUS_ROUTE$SAT_LastBus\n    }\n    if ((SEL_BUS_ROUTE$SAT_FirstBus &lt; (as.numeric(HOUR) * 100)) && (Sat_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sat_LastBus - as.numeric(HOUR) * 100\n    }\n    else if ((SEL_BUS_ROUTE$SAT_FirstBus == (as.numeric(HOUR) * 100)) && (Sat_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$SAT_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$SAT_FirstBus == (as.numeric(HOUR) * 100)) && (Sat_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sat_LastBus - SEL_BUS_ROUTE$SAT_FirstBus\n    }\n  } \n  else if (NUM_DAY_OF_WEEK == 7){\n    if (is.na(SEL_BUS_ROUTE$SUN_FirstBus)){\n      return (-1)\n    }\n    if (SEL_BUS_ROUTE$SUN_LastBus &lt; 3 * 100){\n      Sun_LastBus &lt;- 2400 + SEL_BUS_ROUTE$SUN_LastBus\n    }\n    else{\n      Sun_LastBus &lt;- SEL_BUS_ROUTE$SUN_LastBus\n    }\n    if ((SEL_BUS_ROUTE$SUN_FirstBus &lt; (as.numeric(HOUR) * 100)) && (Sun_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sun_LastBus - as.numeric(HOUR) * 100\n    }\n    else if ((SEL_BUS_ROUTE$SUN_FirstBus == (as.numeric(HOUR) * 100)) && (Sun_LastBus &gt; as.numeric(HOUR) * 100)){\n      temp_timing &lt;- as.numeric(HOUR) * 100 + 60 - SEL_BUS_ROUTE$SUN_FirstBus\n    }\n    else if ((SEL_BUS_ROUTE$SUN_FirstBus == (as.numeric(HOUR) * 100)) && (Sun_LastBus == as.numeric(HOUR) * 100)){\n      temp_timing &lt;- Sun_LastBus - SEL_BUS_ROUTE$SUN_FirstBus\n    }\n  }\n  \n  if (temp_timing &gt; 60){\n    return (60)\n  }\n  else{\n    return (temp_timing)\n  }\n}\n\nnorm_common_bus_svcs &lt;- function(BS_CODE_ORIGIN, BS_CODE_DEST){\n  TEMP_BUS_ROUTE_DF &lt;- BUS_ROUTE_DF[1:5]\n  # Filter ensures correct pairs are selected (in event of start/end stop same) and filters out inaccurate data where stops are recorded in reverse (eg. 167 Nov 8am Weekday data between 3218 and 3129)\n  TEMP_BUS_ROUTE_DF &lt;- left_join(TEMP_BUS_ROUTE_DF, TEMP_BUS_ROUTE_DF, by=c(\"Service_No\", \"Direction\"), suffix=c(\"Origin\", \"Dest\")) %&gt;% filter(SeqOrigin &lt; SeqDest)\n  \n  TEMP_BUS_ROUTE_OD_PAIR &lt;- TEMP_BUS_ROUTE_DF %&gt;% filter(BS_CodeOrigin == BS_CODE_ORIGIN & BS_CodeDest == BS_CODE_DEST)\n}\n\nnorm_verify_express &lt;- function(BUS_SVC, DIR){\n  SEL_BUS_SVC &lt;- BUS_SVC_DF %&gt;% filter(Service_No == BUS_SVC & DIR == Direction)\n  BUS_CAT &lt;- c(\"CITY_LINK\", \"EXPRESS\")\n  if (SEL_BUS_SVC$Category %in% BUS_CAT){\n    return (FALSE)\n  }\n  return (TRUE)\n}\n\nnorm_calc_bph &lt;- function(BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC){\n  common_svcs &lt;- norm_common_bus_svcs(BS_CODE_ORIGIN, BS_CODE_DEST)\n  common_svcs &lt;- common_svcs %&gt;% mutate(mileage = DistanceDest - DistanceOrigin)\n  mean_mileage &lt;- mean(common_svcs$mileage)\n  \n  bph_total &lt;- 0\n  bph_svc &lt;- 0\n  \n  # if no rows (ie. all invalid data, dont run bph)\n  if (nrow(common_svcs) &gt; 0){\n    for (i in 1:nrow(common_svcs)) {\n      if (common_svcs[i,]$mileage &lt;= mean_mileage + 3){\n        temp_bph &lt;- norm_bph(common_svcs[i,]$Service_No, common_svcs[i,]$Direction, HOUR, NUM_DAY_OF_WEEK, BS_CODE_ORIGIN, common_svcs[i,]$SeqOrigin)\n        if (common_svcs[i,]$Service_No == SVC){\n          bph_svc &lt;- temp_bph\n          bph_total &lt;- bph_total + temp_bph\n        }\n        # Let us verify for express service\n        else if (common_svcs[i,]$mileage &lt;= 5){\n          if (norm_verify_express(common_svcs[i,]$Service_No, common_svcs[i,]$Direction)){\n            bph_total &lt;- bph_total + temp_bph\n          }\n        }\n        else{\n          bph_total &lt;- bph_total + temp_bph\n        }\n      }\n    }\n  }\n  \n  bph &lt;- list(bph_svc, bph_total)\n  \n  return (bph)\n}\n\n\nnorm_flow_od &lt;- function(FLOW, BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC){\n  bph &lt;- norm_calc_bph(BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC)\n  bph_svc &lt;- bph[[1]]\n  bph_total &lt;- bph[[2]]\n  svc_flow &lt;- FLOW * (bph_svc / bph_total)\n  if (is.nan(svc_flow)){\n    return (0)\n  }\n  return (svc_flow)\n}"
  },
  {
    "objectID": "explore/167_OD_analysis.html#generating-flows",
    "href": "explore/167_OD_analysis.html#generating-flows",
    "title": "[WIP] Bus Service 167: Travel Pattern Analysis",
    "section": "5.2 Generating Flows",
    "text": "5.2 Generating Flows\n\ngen_od_timing_flows &lt;- function(input_OD, sf_bs, timing){ \n  OD_TEST_DIR1 &lt;- input_OD %&gt;% filter(DAY_TYPE == \"WEEKDAY\" & TIME_PER_HOUR == timing)\n  \n  #norm_flow_od &lt;- function(FLOW, BS_CODE_ORIGIN, BS_CODE_DEST, HOUR, NUM_DAY_OF_WEEK, SVC){\n  OD_TEST_DIR1 &lt;- OD_TEST_DIR1 %&gt;% rowwise() %&gt;%  mutate(NORM_TRIPS = (norm_flow_od(TOTAL_TRIPS, ORIGIN_PT_CODE, DESTINATION_PT_CODE, TIME_PER_HOUR, 1, \"167\")))\n\n  OD_2023_11_DIR1 &lt;- left_join(OD_TEST_DIR1 , sf_bs, by = c(\"ORIGIN_PT_CODE\" = \"BS_Code\")) %&gt;% rename(ORIGIN_BS = ORIGIN_PT_CODE, ORIGIN_PA = PLN_AREA_C, DESTIN_BS = DESTINATION_PT_CODE)\n  \n  OD_2023_11_DIR1 &lt;- left_join(OD_2023_11_DIR1 , sf_bs, by = c(\"DESTIN_BS\" = \"BS_Code\"))\n  \n  return (OD_2023_11_DIR1) \n}\n\ngen_od_timing_PA &lt;- function(OD_2023_11_DIR1_PA){ \n\n    OD_2023_11_DIR1_PA &lt;- OD_2023_11_DIR1_PA %&gt;% rename(DESTIN_PA = PLN_AREA_C) %&gt;% drop_na() %&gt;% group_by(ORIGIN_PA, DESTIN_PA) %&gt;% summarise(PA_TRIPS = sum(NORM_TRIPS))\n\nreturn (OD_2023_11_DIR1_PA) \n}\n\ngen_od_timing_PA_intra &lt;- function(OD_2023_11_DIR1_PA){ \n  OD_2023_11_DIR1_PA_INTRA &lt;- OD_2023_11_DIR1_PA[OD_2023_11_DIR1_PA$ORIGIN_PA!=OD_2023_11_DIR1_PA$DESTIN_PA,] \n  return (OD_2023_11_DIR1_PA_INTRA) \n}\n\ngen_od_timing_PA_inter &lt;- function(OD_2023_11_DIR1_PA){ \n  OD_2023_11_DIR1_PA_INTER &lt;- OD_2023_11_DIR1_PA[OD_2023_11_DIR1_PA$ORIGIN_PA==OD_2023_11_DIR1_PA$DESTIN_PA,] \n  return (OD_2023_11_DIR1_PA_INTER) \n}\n\ngen_od_timing_PA_flows &lt;- function(OD_2023_11_DIR1_PA_INTRA){\n\nsf_OD_2023_11_DIR1_PA_INTRA_FLOWS &lt;- od2line(flow = OD_2023_11_DIR1_PA_INTRA, zones = mpsz_pln_area, zone_code = \"PLN_AREA_C\")\n\nreturn (sf_OD_2023_11_DIR1_PA_INTRA_FLOWS) \n} \ntmap_plot_pa &lt;- function(BS, OD) { \n  tmap_mode(\"view\") \n  tm_shape(mpsz_pln_area) + \n    tm_polygons(\"PLN_AREA_C\", legend.show = FALSE, palette=\"Set3\") + \n  tm_shape(BS) + \n    tm_dots(\"PLN_AREA_C\", scale = 1.3, legend.show = FALSE, palette=\"Set3\") + \n  #tm_shape(sf_BS_167_DIR_2) + \n    # tm_dots(col = \"blue\", scale = 2) + \n  tm_shape(OD) + \n    tm_lines(col = \"PA_TRIPS\", style=\"fixed\", breaks = c(0, 1, 5, 10, 15, 25, 50, 80, 130, 250), lwd = \"PA_TRIPS\", scale=20, palette=\"viridis\") \n} \n\nplot_trip_summary &lt;- function(OD){ \n  summary(OD$NORM_TRIPS) \n  p &lt;- ggplot(OD, aes(x=NORM_TRIPS)) + geom_histogram(binwidth=25) + xlim(0, 500) + ylim(0, 50)\n  ggplotly(p) \n}\n\nPre-generate results\n\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 6)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_6.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 7)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 8)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 9)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 10)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 11)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 12)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_12.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 18)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_18.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 19)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_19.rds\")\ntemp_sf_pa &lt;- gen_od_timing_flows(OD_2023_11_DIR1, BUS_STOP_DF_MPSZ, 20)\nsaveRDS(temp_sf_pa, \"data/167_OD_Analysis/sf_norm_20.rds\")\n\n\n6am7am8am9am10am11am12pm6pm7pm8pm\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_6.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows) %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         YS        AM 54.74234771\n2         AM        BS 38.51508192\n3         SB        YS 25.77903551\n4         YS        BS 15.42857143\n5         YS        NV  9.19047619\n6         YS        TP  9.14285714\n7         SB        BS  6.19532364\n8         SB        TP  4.83033932\n9         SB        AM  4.21642429\n10        YS        OR  3.85714286\n11        SB        OR  3.61904762\n12        AM        TP  3.42857143\n13        YS        DT  3.28571429\n14        AM        OR  2.38095238\n15        AM        NV  2.28571429\n16        AM        DT  2.23809524\n17        SB        BM  1.76190476\n18        AM        MU  1.28571429\n19        YS        NT  1.28571429\n20        SB        NV  1.26603935\n21        SB        NT  0.85714286\n22        BS        TP  0.83564537\n23        YS        BM  0.80952381\n24        YS        MU  0.66666667\n25        BS        OR  0.55535831\n26        BS        DT  0.50757576\n27        SB        MU  0.33333333\n28        SB        DT  0.28571429\n29        AM        NT  0.19047619\n30        BS        NV  0.18881430\n31        AM        BM  0.04761905\n32        BS        MU  0.01839827\n33        BM        OR  0.00000000\n34        BS        BM  0.00000000\n35        BS        NT  0.00000000\n36        DT        BM  0.00000000\n37        MU        BM  0.00000000\n38        MU        DT  0.00000000\n39        NT        BM  0.00000000\n40        NT        DT  0.00000000\n41        NT        MU  0.00000000\n42        NT        OR  0.00000000\n43        NV        BM  0.00000000\n44        NV        DT  0.00000000\n45        NV        MU  0.00000000\n46        NV        NT  0.00000000\n47        NV        OR  0.00000000\n48        OR        BM  0.00000000\n49        OR        DT  0.00000000\n50        OR        MU  0.00000000\n51        TP        BM  0.00000000\n52        TP        DT  0.00000000\n53        TP        MU  0.00000000\n54        TP        NT  0.00000000\n55        TP        NV  0.00000000\n56        TP        OR  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS           71.5 \n 2 SB        SB            3.57\n 3 BS        BS            1.68\n 4 AM        AM            1.21\n 5 BM        BM            0   \n 6 DT        DT            0   \n 7 MU        MU            0   \n 8 NT        NT            0   \n 9 NV        NV            0   \n10 OR        OR            0   \n11 TP        TP            0   \n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_7.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         YS        AM 33.57826831\n2         SB        YS 31.09948302\n3         AM        BS 28.73420840\n4         YS        BS 11.18796992\n5         OR        DT 10.57549732\n6         SB        AM  9.85964912\n7         NV        DT  9.61231495\n8         NV        NT  9.10384571\n9         MU        DT  9.05398997\n10        BS        NV  8.55373148\n11        NT        OR  7.77622980\n12        SB        BS  7.39097744\n13        BS        TP  5.89719357\n14        NV        OR  5.80429713\n15        YS        OR  5.47619048\n16        DT        BM  5.15935139\n17        AM        TP  5.15288221\n18        TP        NV  4.82434563\n19        YS        NV  4.66917293\n20        AM        OR  4.57142857\n21        AM        NV  3.88471178\n22        NT        BM  3.73729941\n23        NV        MU  3.31962520\n24        YS        DT  2.71428571\n25        BS        OR  2.38187633\n26        YS        TP  2.26566416\n27        BS        DT  2.07088989\n28        AM        MU  2.00000000\n29        TP        OR  1.96015832\n30        NV        BM  1.76207235\n31        OR        BM  1.66452805\n32        SB        DT  1.52380952\n33        TP        DT  1.47252747\n34        AM        DT  1.38095238\n35        YS        NT  1.33333333\n36        SB        TP  1.22055138\n37        NT        DT  1.12380952\n38        TP        NT  1.11875822\n39        OR        MU  0.99298293\n40        MU        BM  0.88216961\n41        AM        NT  0.85714286\n42        BS        BM  0.82509158\n43        BS        NT  0.80000000\n44        BS        MU  0.78095238\n45        YS        MU  0.76190476\n46        SB        OR  0.61904762\n47        TP        MU  0.59047619\n48        SB        MU  0.57142857\n49        SB        NV  0.48120301\n50        TP        BM  0.44041154\n51        SB        BM  0.42857143\n52        NT        MU  0.37895761\n53        YS        BM  0.23809524\n54        AM        BM  0.19047619\n55        BM        SB  0.04761905\n56        SB        NT  0.04761905\n57        BM        MU  0.00000000\n58        BM        OR  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          40.9  \n 2 BM        BM          20.7  \n 3 SB        SB           8.32 \n 4 BS        BS           5.22 \n 5 DT        DT           2.40 \n 6 MU        MU           2.01 \n 7 TP        TP           1.66 \n 8 NV        NV           1.65 \n 9 OR        OR           1.29 \n10 AM        AM           1.24 \n11 NT        NT           0.279\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_8.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         YS        AM 54.2710323\n2         AM        BS 31.6403363\n3         MU        DT 30.4413848\n4         SB        YS 28.7579756\n5         NV        OR 18.0658537\n6         OR        DT 17.9298779\n7         NV        NT 17.8644522\n8         NV        DT 14.8688962\n9         NT        OR 13.1950568\n10        YS        BS 11.1175987\n11        BS        NV  9.1853777\n12        DT        BM  8.2857811\n13        SB        AM  8.0134077\n14        BS        OR  6.8846852\n15        TP        NV  6.3871104\n16        BS        TP  6.0623215\n17        NV        MU  5.7794747\n18        SB        BS  5.2853683\n19        NT        BM  5.1880693\n20        OR        BM  4.8051573\n21        YS        OR  3.9523810\n22        NV        BM  3.7346189\n23        YS        NV  3.6384672\n24        AM        NV  2.8946412\n25        AM        DT  2.8571429\n26        BS        DT  2.7208639\n27        TP        OR  2.5683165\n28        YS        TP  2.5591454\n29        MU        BM  2.2396705\n30        SB        OR  2.0000000\n31        OR        MU  1.9864865\n32        AM        OR  1.8571429\n33        NT        DT  1.7244444\n34        TP        NT  1.7220120\n35        SB        NV  1.6173608\n36        TP        DT  1.5734196\n37        YS        NT  1.5714286\n38        BS        BM  1.4939711\n39        BS        MU  1.2793651\n40        AM        MU  1.2380952\n41        SB        DT  1.1428571\n42        YS        DT  1.1428571\n43        NT        MU  0.9330574\n44        SB        BM  0.9047619\n45        SB        MU  0.8571429\n46        YS        MU  0.8571429\n47        BS        NT  0.7932275\n48        TP        BM  0.7242923\n49        SB        NT  0.7142857\n50        AM        TP  0.6502746\n51        TP        MU  0.6158730\n52        AM        BM  0.5238095\n53        AM        NT  0.5238095\n54        YS        BM  0.5238095\n55        SB        TP  0.3106700\n56        BM        SB  0.1904762\n57        BM        MU  0.0000000\n58        BM        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 10 × 3\n# Groups:   ORIGIN_PA [10]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          42.2  \n 2 BM        BM          23.3  \n 3 SB        SB          15.5  \n 4 BS        BS           8.02 \n 5 MU        MU           6.15 \n 6 DT        DT           4.56 \n 7 NV        NV           4.37 \n 8 TP        TP           1.72 \n 9 AM        AM           0.927\n10 NT        NT           0.388\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_9.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         SB        YS 29.6985009\n2         AM        BS 23.2781101\n3         MU        DT 20.8638621\n4         NT        OR 17.4732003\n5         NV        OR 16.7090113\n6         YS        AM 16.5693830\n7         OR        DT 14.6183124\n8         NV        NT 11.0546522\n9         YS        BS 10.2073733\n10        NV        DT  8.4729652\n11        DT        BM  6.8964398\n12        BS        OR  6.1384924\n13        BS        NV  6.1138363\n14        NV        MU  5.2645030\n15        SB        BS  4.7250384\n16        SB        AM  4.5161290\n17        AM        OR  4.2380952\n18        OR        BM  3.9632109\n19        NT        BM  3.8766230\n20        BS        TP  3.8475366\n21        OR        MU  3.8422232\n22        TP        NV  3.7558750\n23        TP        OR  3.3536203\n24        YS        OR  2.9047619\n25        NT        DT  2.5868132\n26        YS        NV  2.5145929\n27        SB        OR  2.3333333\n28        NV        BM  2.1551827\n29        MU        BM  2.1413903\n30        AM        NV  1.8156682\n31        YS        DT  1.5714286\n32        YS        TP  1.4976959\n33        BS        DT  1.3751257\n34        TP        DT  1.3334577\n35        BS        MU  1.2505495\n36        SB        BM  1.1428571\n37        SB        MU  1.0952381\n38        BS        NT  1.0373626\n39        AM        TP  1.0368664\n40        NT        MU  1.0043301\n41        AM        MU  0.9047619\n42        SB        TP  0.8663594\n43        TP        NT  0.8003565\n44        SB        NV  0.7987711\n45        YS        BM  0.6190476\n46        YS        MU  0.5714286\n47        YS        NT  0.5238095\n48        BS        BM  0.4877718\n49        SB        NT  0.4761905\n50        SB        DT  0.4285714\n51        TP        BM  0.3986178\n52        TP        MU  0.3384615\n53        AM        DT  0.3333333\n54        AM        BM  0.2857143\n55        AM        NT  0.1904762\n56        BM        SB  0.1904762\n57        BM        DT  0.0000000\n58        BM        MU  0.0000000\n59        BM        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          24.6  \n 2 BM        BM          22.2  \n 3 SB        SB          10.0  \n 4 BS        BS           6.82 \n 5 DT        DT           5.52 \n 6 MU        MU           4.68 \n 7 OR        OR           3.73 \n 8 NV        NV           2.62 \n 9 AM        AM           0.972\n10 TP        TP           0.940\n11 NT        NT           0.177\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_10.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         SB        YS 20.2682115\n2         NT        OR 18.9209250\n3         AM        BS 16.9221564\n4         NV        OR 16.4087523\n5         OR        DT 10.4447649\n6         YS        BS  9.4700461\n7         MU        DT  9.2002212\n8         BS        OR  8.2630268\n9         YS        AM  7.7442742\n10        DT        BM  6.6517715\n11        NV        NT  5.1921341\n12        BS        NV  5.1404578\n13        NV        DT  5.0336147\n14        TP        OR  5.0263685\n15        YS        OR  3.8095238\n16        NV        MU  3.8009183\n17        OR        MU  3.6188937\n18        OR        BM  2.9955352\n19        AM        OR  2.8571429\n20        YS        NV  2.8371736\n21        SB        BS  2.8033794\n22        TP        NV  2.7694628\n23        BS        TP  2.5509805\n24        AM        NV  1.9508449\n25        BS        MU  1.9289377\n26        SB        NV  1.8986175\n27        SB        OR  1.7142857\n28        AM        MU  1.5238095\n29        NV        BM  1.4459670\n30        MU        BM  1.4406464\n31        SB        AM  1.4270353\n32        YS        TP  1.3133641\n33        NT        BM  1.2401678\n34        BS        DT  1.2117380\n35        NT        DT  1.1589744\n36        SB        BM  1.1428571\n37        NT        MU  1.0716663\n38        AM        DT  0.9523810\n39        AM        TP  0.9216590\n40        SB        DT  0.9047619\n41        YS        MU  0.9047619\n42        TP        NT  0.8879778\n43        TP        MU  0.8461538\n44        SB        MU  0.8095238\n45        BS        NT  0.7010989\n46        YS        BM  0.6666667\n47        YS        DT  0.6666667\n48        TP        DT  0.5337539\n49        BS        BM  0.4167211\n50        BM        SB  0.3333333\n51        SB        TP  0.3010753\n52        AM        NT  0.2857143\n53        YS        NT  0.2857143\n54        TP        BM  0.2237055\n55        SB        NT  0.1904762\n56        AM        BM  0.0952381\n57        BM        MU  0.0000000\n58        BM        OR  0.0000000\n59        MU        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS         22.7   \n 2 BM        BM         18.9   \n 3 SB        SB          6.42  \n 4 BS        BS          4.84  \n 5 OR        OR          2.61  \n 6 NV        NV          2.48  \n 7 DT        DT          2.48  \n 8 MU        MU          2.29  \n 9 AM        AM          0.721 \n10 TP        TP          0.372 \n11 NT        NT          0.0744\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_11.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         NT        OR 24.1619132\n2         SB        YS 20.4134534\n3         NV        OR 19.7632224\n4         AM        BS 18.8457835\n5         DT        BM 12.4242619\n6         OR        DT 10.9622361\n7         MU        DT 10.5904685\n8         BS        NV  8.9696601\n9         YS        BS  6.6820276\n10        BS        OR  6.2397735\n11        NV        NT  5.8671799\n12        TP        NV  5.6286715\n13        TP        OR  5.5041468\n14        YS        AM  4.7127183\n15        OR        MU  4.7117221\n16        NV        DT  4.0652153\n17        NV        MU  3.8329804\n18        SB        BS  3.5437788\n19        OR        BM  3.4402721\n20        YS        OR  3.4285714\n21        AM        OR  3.0476190\n22        YS        NV  2.4992320\n23        BS        TP  2.4221243\n24        MU        BM  2.0793847\n25        NT        MU  1.8674825\n26        BS        MU  1.8578755\n27        NT        DT  1.7648352\n28        AM        NV  1.7250384\n29        AM        MU  1.5238095\n30        NV        BM  1.3429465\n31        SB        OR  1.3333333\n32        YS        MU  1.2380952\n33        SB        AM  1.2104455\n34        TP        MU  1.1604396\n35        YS        TP  1.1059908\n36        BS        DT  1.0568081\n37        SB        BM  0.9523810\n38        TP        NT  0.9061419\n39        YS        BM  0.9047619\n40        NT        BM  0.7850717\n41        SB        NV  0.7803379\n42        SB        DT  0.7619048\n43        AM        DT  0.6666667\n44        SB        NT  0.6666667\n45        SB        MU  0.5714286\n46        TP        DT  0.5128683\n47        BS        BM  0.4910514\n48        SB        TP  0.4685100\n49        YS        DT  0.4285714\n50        AM        TP  0.4147465\n51        AM        NT  0.3809524\n52        BS        NT  0.3142857\n53        AM        BM  0.2857143\n54        BM        SB  0.2857143\n55        YS        NT  0.2857143\n56        TP        BM  0.1264972\n57        BM        DT  0.0000000\n58        BM        MU  0.0000000\n59        BM        OR  0.0000000\n60        NT        NV  0.0000000\n61        OR        NV  0.0000000\n62        YS        SB  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS          24.1  \n 2 BM        BM          18.5  \n 3 SB        SB           8.08 \n 4 BS        BS           5.45 \n 5 NV        NV           3.82 \n 6 OR        OR           3.66 \n 7 DT        DT           2.41 \n 8 AM        AM           2.12 \n 9 MU        MU           1.81 \n10 TP        TP           0.479\n11 NT        NT           0.172\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_12.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA   PA_TRIPS\n1         NT        OR 49.0513244\n2         NV        OR 18.3313521\n3         AM        BS 17.2722498\n4         SB        YS 15.5486300\n5         DT        BM 15.4027930\n6         OR        DT 13.0154106\n7         MU        DT 12.4042916\n8         YS        BS  8.7557604\n9         OR        MU  7.3955708\n10        TP        OR  6.4223488\n11        TP        NV  5.8910876\n12        NV        NT  5.5764864\n13        YS        AM  5.4940650\n14        BS        OR  4.9056443\n15        BS        NV  4.7520016\n16        NV        MU  4.7330169\n17        OR        BM  4.7135065\n18        MU        BM  3.5292438\n19        YS        OR  3.3809524\n20        BS        TP  2.7608115\n21        SB        BS  2.7050691\n22        YS        NV  2.5637481\n23        NT        MU  2.3324593\n24        NV        DT  2.2926797\n25        AM        OR  2.2380952\n26        SB        OR  1.7142857\n27        NV        BM  1.7006605\n28        AM        NV  1.6513057\n29        SB        AM  1.6175115\n30        AM        MU  1.5714286\n31        YS        TP  1.4976959\n32        YS        MU  1.4285714\n33        BS        DT  1.2579096\n34        BS        MU  1.2080586\n35        YS        BM  1.1428571\n36        TP        MU  1.1362637\n37        SB        BM  1.0476190\n38        AM        DT  0.9047619\n39        NT        BM  0.8713220\n40        SB        TP  0.8586790\n41        BS        BM  0.7283908\n42        NT        DT  0.7245421\n43        AM        TP  0.6682028\n44        YS        DT  0.6666667\n45        TP        NT  0.6613133\n46        BS        NT  0.6490842\n47        SB        MU  0.6190476\n48        TP        BM  0.5884148\n49        BM        SB  0.5238095\n50        SB        NV  0.4685100\n51        AM        NT  0.4285714\n52        SB        NT  0.4285714\n53        SB        DT  0.3333333\n54        YS        NT  0.3333333\n55        TP        DT  0.2930676\n56        AM        BM  0.2380952\n57        BM        DT  0.0000000\n58        BM        MU  0.0000000\n59        BM        OR  0.0000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 YS        YS         31.4   \n 2 BM        BM         21.5   \n 3 SB        SB          9.01  \n 4 BS        BS          5.92  \n 5 DT        DT          5.43  \n 6 OR        OR          4.80  \n 7 AM        AM          3.26  \n 8 NV        NV          2.83  \n 9 MU        MU          2.69  \n10 TP        TP          0.655 \n11 NT        NT          0.0916\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_18.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         DT        BM 75.59138560\n2         AM        BS 41.61442548\n3         SB        YS 21.28153393\n4         OR        BM 13.56466784\n5         MU        BM 11.20804097\n6         YS        BS  9.39393939\n7         YS        AM  8.74280558\n8         AM        NV  4.04329004\n9         MU        DT  3.61982826\n10        AM        OR  2.57142857\n11        SB        BS  2.37662338\n12        OR        DT  2.28571429\n13        NT        BM  2.17230936\n14        SB        AM  1.87012987\n15        YS        NV  1.80952381\n16        AM        TP  1.79653680\n17        YS        OR  1.76190476\n18        NV        BM  1.69611190\n19        YS        TP  1.68831169\n20        BM        SB  1.00000000\n21        AM        MU  0.71428571\n22        AM        BM  0.66666667\n23        SB        BM  0.61904762\n24        SB        MU  0.61904762\n25        TP        BM  0.61105957\n26        YS        BM  0.57142857\n27        BS        BM  0.52527098\n28        YS        MU  0.42857143\n29        SB        NV  0.39826840\n30        SB        OR  0.38095238\n31        SB        TP  0.38095238\n32        YS        DT  0.38095238\n33        NV        DT  0.27712724\n34        BS        TP  0.27244790\n35        BS        NV  0.24776226\n36        AM        NT  0.23809524\n37        BS        DT  0.23809524\n38        NT        DT  0.23809524\n39        BS        MU  0.19047619\n40        YS        NT  0.19047619\n41        BS        OR  0.16356108\n42        TP        DT  0.11204482\n43        AM        DT  0.09523810\n44        SB        DT  0.09523810\n45        SB        NT  0.09523810\n46        BS        NT  0.04761905\n47        BM        DT  0.00000000\n48        BM        MU  0.00000000\n49        BM        OR  0.00000000\n50        BM        YS  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 6 × 3\n# Groups:   ORIGIN_PA [6]\n  ORIGIN_PA DESTIN_PA PA_TRIPS\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n1 YS        YS           35.5 \n2 BM        BM           31.5 \n3 SB        SB           12.6 \n4 AM        AM            3.73\n5 BS        BS            3.06\n6 DT        DT            1.08\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_19.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         DT        BM 42.34102384\n2         AM        BS 16.50320223\n3         OR        MU 16.35958338\n4         SB        YS 14.78329430\n5         OR        DT 13.90941043\n6         OR        BM 13.62984587\n7         MU        DT 12.56206927\n8         NV        OR 12.52243246\n9         MU        BM 11.73866239\n10        NT        OR  8.64239769\n11        YS        AM  7.67541029\n12        NV        NT  5.71267161\n13        YS        BS  5.26775956\n14        BS        NV  2.79977182\n15        NV        MU  2.78571429\n16        NV        BM  2.48885051\n17        BS        TP  2.45081777\n18        TP        NV  2.27305837\n19        TP        OR  1.99624364\n20        NT        BM  1.92516992\n21        NT        MU  1.70876649\n22        SB        BS  1.49960968\n23        SB        AM  1.39968774\n24        YS        TP  1.39890710\n25        AM        OR  1.38095238\n26        NV        DT  1.27142857\n27        YS        NV  1.25136612\n28        AM        TP  1.02732240\n29        AM        NV  1.02654176\n30        BS        OR  1.00185375\n31        NT        DT  0.66666667\n32        SB        NV  0.62919594\n33        YS        MU  0.61904762\n34        BM        SB  0.57142857\n35        SB        MU  0.52380952\n36        YS        OR  0.52380952\n37        AM        MU  0.47619048\n38        SB        TP  0.45667447\n39        TP        MU  0.40816327\n40        BS        DT  0.40238095\n41        AM        NT  0.38095238\n42        TP        NT  0.36068831\n43        SB        OR  0.33333333\n44        BS        MU  0.31746032\n45        TP        BM  0.21693160\n46        BS        NT  0.20634921\n47        BS        BM  0.15465587\n48        AM        BM  0.09523810\n49        AM        DT  0.09523810\n50        SB        BM  0.09523810\n51        YS        BM  0.09523810\n52        YS        NT  0.09523810\n53        TP        DT  0.09295270\n54        SB        DT  0.04761905\n55        YS        DT  0.04761905\n56        BM        MU  0.00000000\n57        YS        SB  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM         26.6   \n 2 YS        YS         17.9   \n 3 SB        SB         10.6   \n 4 DT        DT          5.18  \n 5 BS        BS          4.00  \n 6 OR        OR          3.92  \n 7 MU        MU          2.97  \n 8 NV        NV          2.93  \n 9 AM        AM          0.861 \n10 TP        TP          0.780 \n11 NT        NT          0.0357\n\n\n\n\n\ntmap_options(check.and.fix = TRUE)\ntemp_sf &lt;- readRDS(\"data/167_OD_Analysis/sf_norm_20.rds\")\ntemp_sf_pa &lt;- gen_od_timing_PA(temp_sf)\ntemp_sf_pa_intra &lt;- gen_od_timing_PA_intra(temp_sf_pa)\ntemp_sf_pa_inter &lt;- gen_od_timing_PA_inter(temp_sf_pa)\ntemp_sf_pa_intra_flows &lt;- gen_od_timing_PA_flows(temp_sf_pa_intra)\n\ntmap_plot_pa(sf_BS_167_DIR_1_MPSZ, temp_sf_pa_intra_flows)\n\n\n\n\n\nst_drop_geometry(temp_sf_pa_intra_flows)  %&gt;% arrange(desc(PA_TRIPS))\n\n   ORIGIN_PA DESTIN_PA    PA_TRIPS\n1         DT        BM 30.12372519\n2         OR        BM 15.76603802\n3         OR        MU 11.73715526\n4         MU        BM 11.58357151\n5         SB        YS 11.25480094\n6         OR        DT  9.46546443\n7         AM        BS  7.60784789\n8         MU        DT  6.29761957\n9         YS        AM  4.12605279\n10        NV        OR  4.09979532\n11        YS        BS  3.47540984\n12        NV        NT  3.19162323\n13        NT        OR  3.17851951\n14        BS        TP  2.17639578\n15        BS        NV  2.01010078\n16        TP        NV  1.14594313\n17        AM        OR  1.00000000\n18        NV        BM  0.94252747\n19        YS        NV  0.93520687\n20        NT        BM  0.88231277\n21        SB        BS  0.87587822\n22        NT        MU  0.82334254\n23        YS        TP  0.80874317\n24        NT        DT  0.70975057\n25        NV        DT  0.70748299\n26        SB        AM  0.66354411\n27        NV        MU  0.65087764\n28        BS        OR  0.62183827\n29        TP        OR  0.60372222\n30        AM        NV  0.55581577\n31        AM        TP  0.54644809\n32        YS        OR  0.52380952\n33        YS        MU  0.47619048\n34        SB        BM  0.33333333\n35        AM        NT  0.28571429\n36        BM        SB  0.23809524\n37        SB        OR  0.23809524\n38        YS        BM  0.23809524\n39        BS        DT  0.23582766\n40        SB        TP  0.20062451\n41        SB        NV  0.17876659\n42        TP        BM  0.15494126\n43        YS        NT  0.14285714\n44        BS        MU  0.13605442\n45        BS        NT  0.13605442\n46        TP        NT  0.12301019\n47        BS        BM  0.11528822\n48        AM        BM  0.09523810\n49        AM        DT  0.09523810\n50        SB        DT  0.09523810\n51        SB        NT  0.09523810\n52        TP        DT  0.05719064\n53        AM        MU  0.04761905\n54        TP        MU  0.04535147\n55        BM        DT  0.00000000\n56        BM        MU  0.00000000\n57        BM        OR  0.00000000\n\nplot_trip_summary(temp_sf)\n\n\n\n\ntemp_sf_pa_inter %&gt;% arrange(desc(PA_TRIPS))\n\n# A tibble: 11 × 3\n# Groups:   ORIGIN_PA [11]\n   ORIGIN_PA DESTIN_PA PA_TRIPS\n   &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n 1 BM        BM         19.6   \n 2 YS        YS         13.2   \n 3 SB        SB          4.44  \n 4 DT        DT          3.62  \n 5 BS        BS          2.20  \n 6 OR        OR          2.18  \n 7 MU        MU          1.73  \n 8 NV        NV          0.877 \n 9 AM        AM          0.502 \n10 TP        TP          0.355 \n11 NT        NT          0.0157\n\n\n\n\n\nTodo list:\n\nVisualisation tmap for Subzone / bus stop see how to display data\nEDA on trip - derivation on initial analysis (eg. focus on AM Peak Dir 1?)\n\nSequential trial and error, might be worthwhile to check off peak trends as well - without data cannot determine which user group but maybe can guess?\n\nK-means clustering on types of stops based on temporal data - each stop, pattern based on day type [probably seperate article]"
  }
]