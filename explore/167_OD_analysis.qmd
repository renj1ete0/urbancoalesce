---
title: "Bus Service 167: Travel Pattern Analysis"
description: "Analysis of Travel Patterns Using OD-Matrix provided by LTA"
author: "Teo Ren Jie"
date: "12/23/2023"
#date-modified: "4/13/2023"
number-sections: true
categories: ["167", "Bus", "Travel Pattern Analysis", "R"]
title-block-banner: true
#image: Take-Home_Ex03/preview.png
execute:
  message: false
  warning: false
---

::: callout-caution
This article and analysis is a work-in-progress! Read the results at your own risk!
:::

# Overview

## Issue

Given the

## Objectives

Understand more about the initial failure of the route rationalisation of bus service 167:

1.  Commuters perspective
2.  Why a hub-and-spoke approach (with the introduction of Thomson East Coast Line) is insufficient to shift demand?

Click here to skip to the analysis

# Getting Started

## Setting Up

Packages required to be loaded for

```{r}
pacman::p_load(dplyr, readr, sf, tidyverse, tmap, sfdep, ggpubr, Metrics, ggplot2, plotly, spdep, rjson, od)
```

## Data Sources

| Dataset Name                                               | Source                                                                                          | Methodology |
|----------------------|------------------------------------|---------------|
| Origin-Destination Passenger Count for Buses (OD) Nov 2023 | [[LTA Datamall]{.underline}](https://datamall.lta.gov.sg/content/datamall/en/dynamic-data.html) | API         |
| Bus Routes as of 26 Nov 2023                               | [LTA Datamall](https://datamall.lta.gov.sg/content/datamall/en/dynamic-data.html)               | API         |
| Bus Stops as of 26 Nov 2023                                | [LTA Datamall](https://datamall.lta.gov.sg/content/datamall/en/dynamic-data.html)               | API         |

# Data Preparation

## Loading Data

Loading the Origin-Destination Passenger Count for Buses

```{r}
OD_2023_11 <- read.csv("data/167_OD_analysis/origin_destination_bus_202311.csv")
```

Loading the Bus Routes JSON file:

```{r}
BUS_ROUTE <- fromJSON(file="data/167_OD_analysis/busroute_2023-11-26.json")
```

Loading the Bus Stops JSON file:

```{r}
BUS_STOP <- fromJSON(file="data/167_OD_analysis/busstop_2023-11-26.json")
```

## Extracting Relevant Information

## Extracting Relevant Information

For the OD Passenger Count, we are only interested in obtaining counts which involves bus service 167. We will need to extract it twice, once for each direction.

We are not implementing a check for stops since the JSON data from LTA Datamall is returned in stop sequence.

### Extract 167 Bus Stops

::: callout-note
As LTA's OD Count stores CBD area bus stops starting with 0 as 4 digit codes instead of 5 digit prefixed with 0, we recode the bus stops as numeric and drop the '0' prefix
:::

```{r}

BS_167_DIR_1_DF <- data.frame(Seq =  integer(), BS_Code = integer())
BS_167_DIR_2_DF <- data.frame(Seq =  integer(), BS_Code = integer())

for (route_info in BUS_ROUTE){
  if (route_info$ServiceNo == "167"){
    if (route_info$Direction == 1){
      BS_167_DIR_1_temp <- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))
      BS_167_DIR_1_DF[nrow(BS_167_DIR_1_DF) +1,] <- BS_167_DIR_1_temp
    }
    else if (route_info$Direction == 2){
      BS_167_DIR_2_temp <- data.frame(Seq = as.numeric(route_info$StopSequence), BS_Code = as.numeric(route_info$BusStopCode))
      BS_167_DIR_2_DF[nrow(BS_167_DIR_2_DF) +1,] <- BS_167_DIR_2_temp  
    }
  }
}

rm(BS_167_DIR_1_temp)
rm(BS_167_DIR_2_temp)
```

### Append Bus Stop Names to DataFrame

We convert the List format of Bus Stops to a more workable DataFrame format

```{r}
BUS_STOP_DF <- data.frame(BS_Code = integer(), BS_Road_Name = character(), BS_Name = character(), Latitude = double(), Longitude = double())
for (bs in BUS_STOP){
  BS_TEMP <- data.frame(BS_Code = as.numeric(bs$BusStopCode), BS_Road_Name = bs$RoadName, BS_Name = bs$Description, Latitude = as.numeric(bs$Latitude), Longitude = as.numeric(bs$Longitude))
  BUS_STOP_DF[nrow(BUS_STOP_DF) +1,] <- BS_TEMP  
}
rm(BS_TEMP)
```

We then do a left join, merging the bus stop info into Bus Service direction DataFrames

```{r}
BS_167_DIR_1_DF <- merge(x=BS_167_DIR_1_DF,y=BUS_STOP_DF, 
             by="BS_Code", all.x=TRUE)
BS_167_DIR_2_DF <- merge(x=BS_167_DIR_2_DF,y=BUS_STOP_DF, 
             by="BS_Code", all.x=TRUE)
```

### Reset Row Index Numbering

```{r}
rownames(BS_167_DIR_1_DF) <- BS_167_DIR_1_DF$Seq
rownames(BS_167_DIR_2_DF) <- BS_167_DIR_2_DF$Seq
```

### Extract OD Passenger Count Related to 167

Extracting the Direction 1 OD Data

```{r}
OD_2023_11_DIR1 <- OD_2023_11 %>% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_1_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_1_DF$BS_Code)
```

Just to check if the number of bus stops extracted matches the number of stops we have

```{r}
num_stops_OD_1 <- n_distinct(OD_2023_11_DIR1$ORIGIN_PT_CODE)
num_stops_OD_1
num_stops_OD_1 == nrow(BS_167_DIR_1_DF)
```

Extracting the Direction 2 OD Data

```{r}
OD_2023_11_DIR2 <- OD_2023_11 %>% filter(OD_2023_11$ORIGIN_PT_CODE %in% BS_167_DIR_2_DF$BS_Code & OD_2023_11$DESTINATION_PT_CODE %in% BS_167_DIR_2_DF$BS_Code)
```

Just to check if the number of bus stops extracted matches the number of stops we have

```{r}
num_stops_OD_2 <- n_distinct(OD_2023_11_DIR2$ORIGIN_PT_CODE)
num_stops_OD_2
num_stops_OD_2 == nrow(BS_167_DIR_2_DF)
```

# Exploratory Data Analysis

Investigating the Bus Stops on Bus Service 167

::: panel-tabset
## Dir 1 (Sembawang to Bt Merah)

71 Stops

```{r}
BS_167_DIR_1_DF[order(BS_167_DIR_1_DF$Seq),]
```

## Dir 2 (Bt Merah to Sembawang)

69 Stops

```{r}
BS_167_DIR_2_DF[order(BS_167_DIR_2_DF$Seq),]
```
:::

```{r}
sf_BS_167_DIR_1 <- st_as_sf(BS_167_DIR_1_DF, coords = c("Longitude", "Latitude"), crs = 4326)
sf_BS_167_DIR_2 <- st_as_sf(BS_167_DIR_2_DF, coords = c("Longitude", "Latitude"), crs = 4326)

sf_BS_167_DIR_1 <- st_transform(sf_BS_167_DIR_1, crs = 3414)
sf_BS_167_DIR_2 <- st_transform(sf_BS_167_DIR_2, crs = 3414)
```

```{r}
tmap_mode("view")
tm_shape(sf_BS_167_DIR_1) +
  tm_dots(col = "red") +
tm_shape(sf_BS_167_DIR_2) +
  tm_dots(col = "blue")
```

```{r}
OD_2023_11_DIR1TEST <- left_join(OD_2023_11_DIR1, BUS_STOP_DF, 
             by=c("ORIGIN_PT_CODE" = "BS_Code"))
OD_2023_11_DIR1TEST <- left_join(OD_2023_11_DIR1TEST, BUS_STOP_DF, 
             by=c("DESTINATION_PT_CODE" = "BS_Code"), suffix=c("_ORIGIN", "_DEST"))

sf_BS_167_DIR_1test <- sf_BS_167_DIR_1[c(1,4)]
```

```{r}
gen_od_timing <- function(input_OD, sf_bs, timing){
  OD_TEST_DIR1 <- input_OD %>% filter(DAY_TYPE == "WEEKDAY" & TIME_PER_HOUR == timing)
  OD_TEST_DIR1 <- OD_TEST_DIR1[5:7]
  sf <- od_to_sf(OD_TEST_DIR1, sf_bs)
  
  return (sf)
}
tmap_plot_route <- function(BS, OD) {
  tmap_mode("view")
  tm_basemap(leaflet::providers$Stadia.StamenToner) +
  tm_shape(BS) +
    tm_dots(col = "magenta", scale = 1.3) +
  #tm_shape(sf_BS_167_DIR_2) +
  #  tm_dots(col = "blue", scale = 2) +
  tm_shape(OD) +
    tm_lines("TOTAL_TRIPS",  style="fixed", breaks = c(0, 25, 50, 100, 250, 500, 700, 1000, 1500, 2500), lwd = "TOTAL_TRIPS", scale=15, palette="viridis")
}
plot_trip_summary <- function(OD){
  summary(OD$TOTAL_TRIPS)
  p <- ggplot(OD, aes(x=TOTAL_TRIPS)) + 
    geom_histogram(binwidth=100) +
    xlim(0, 2500) +
    ylim(0, 400)
  
  ggplotly(p)
}
```

::: panel-tabset
Weekday trips, 6am to 9am - temp plots

::: callout-note
For OD Count Data on Weekday, divide total trip value by 21 (21 weekdays excl PH)
:::

## 6am

```{r}

temp_sf <- gen_od_timing(OD_2023_11_DIR1, sf_BS_167_DIR_1, 6)

tmap_plot_route(sf_BS_167_DIR_1, temp_sf)
temp_sf %>% arrange(desc(TOTAL_TRIPS))

plot_trip_summary(temp_sf)
```

## 7am

```{r}
temp_sf <- gen_od_timing(OD_2023_11_DIR1, sf_BS_167_DIR_1, 7)

tmap_plot_route(sf_BS_167_DIR_1, temp_sf)

plot_trip_summary(temp_sf)
```

## 8am

```{r}
temp_sf <- gen_od_timing(OD_2023_11_DIR1, sf_BS_167_DIR_1, 8)

tmap_plot_route(sf_BS_167_DIR_1, temp_sf)

plot_trip_summary(temp_sf)
```

## 9am

```{r}
temp_sf <- gen_od_timing(OD_2023_11_DIR1, sf_BS_167_DIR_1, 9)

tmap_plot_route(sf_BS_167_DIR_1, temp_sf)

plot_trip_summary(temp_sf)
```
:::

Todo list:

-   Visualisation tmap for Subzone / bus stop see how to display data

-   EDA on trip - derivation on initial analysis (eg. focus on AM Peak Dir 1?)

    -   Sequential trial and error, might be worthwhile to check off peak trends as well - without data cannot determine which user group but maybe can guess?

-   K-means clustering on types of stops based on temporal data - each stop, pattern based on day type

-   
